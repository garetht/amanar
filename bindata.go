// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (14.233kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x46\x12\x7f\xf7\x5f\x31\xd0\x1d\x70\xd7\x43\x42\xa1\x7d\xf4\x9b\xe1\x34\xbd\x14\xee\xc5\x4d\xe2\x00\xc5\x21\xa7\xae\xb8\x43\x71\xe3\xe5\x2e\xbd\x1f\xb2\x84\xc2\xff\xfb\x61\x76\x49\x8a\x14\xa9\x0f\xcb\x75\x62\xab\xd1\x83\x2d\x71\x67\xbf\x7e\x33\xf3\x9b\x99\xd5\xea\x8f\x13\x80\x91\x5b\x96\x38\x3a\x85\x91\x9e\x7e\xc6\xd4\x8d\x5e\xd0\x33\x83\x37\x5e\x18\xe4\xa3\x53\xf8\xef\x09\x00\xc0\x88\x15\x4c\x31\x33\x49\xb5\xca\xc4\xcc\x1b\xe6\x84\x56\xa3\x13\x80\x4f\x41\xbe\x64\xce\xa1\x51\x97\x46\x97\x68\x9c\x40\x3b\x3a\x85\x3f\x62\xc7\xff\x2d\x5e\x26\xff\x6a\x3e\x02\x8c\x38\xda\xd4\x88\x32\x0c\x70\x0a\xa3\x55\x1f\x28\x0d\x66\x62\x81\x1c\x6e\x85\xcb\x61\xf1\x12\x6e\x85\x94\x30\x45\x60\x52\xea\x5b\xe4\x20\x14\xb8\x1c\xc1\xe9\x12\x24\xce\x51\x82\xce\xc0\xe5\xc2\x82\x4d\x73\x2c\xd8\x0b\x98\x7a\x17\x3b\x29\xed\xa8\xa3\xb7\xc8\x41\x1b\x48\x73\x4c\xaf\x91\x27\xf0\x81\xa4\xc3\x70\x16\x32\x6d\x80\xa9\x34\xd7\xc6\x82\xd3\x24\x2e\x94\x45\xe3\x90\x87\x26\x9a\xc9\xa0\xb7\x48\xb3\x94\xcc\x38\x1b\xa7\x43\xf8\xed\xec\x97\x0b\xc8\x84\xc4\x6a\x3c\x1a\x52\x31\xa9\x67\xda\x87\x91\x98\xe2\x30\x65\x61\x6a\x05\xaf\x74\x7a\x8d\x06\xce\x75\x51\x6a\x8b\xff\xb0\xf0\xe3\xc2\xa1\xb2\x42\x2b\x78\x2d\x50\x72\x0b\xff\xcc\x9d\x2b\xed\xe9\x78\xcc\x75\x6a\x13\x1e\xe4\x93\x54\x17\xe3\x34\xf6\xa9\xff\xbf\xa4\x29\xc7\x7f\xc3\xba\xff\xcb\x2c\xf4\xff\x2e\x19\x05\x68\xef\x4e\x00\xee\x82\x36\x18\xe7\x82\xe0\x65\xb2\xa3\x90\x8c\x49\x8b\x51\x5d\x03\x7a\x1a\x54\x70\x4b\x6d\xb5\x99\x30\x63\xd8\x32\x58\x49\x78\x2c\x1c\x16\xb6\x25\x37\x6c\x50\x55\x4b\xcf\xac\xaa\xe7\x73\xe6\xa5\x9b\x30\xce\x0d\x5a\xdb\xea\xd0\x34\xf5\xcc\x2e\xbe\x3e\xb5\xc6\x1e\xd8\xd3\xe0\xe8\xdd\xc6\xbe\x3d\x7e\xc8\x11\x2a\xd9\xa0\xcb\xa0\x7a\x91\x7a\xc9\x0c\x84\x91\x12\xf8\x48\xff\x6a\x21\xb4\xe0\xad\x67\x52\x2e\x81\x8b\x2c\x43\x13\x8c\x27\xbe\x45\xe5\x00\xd5\x5c\x18\xad\x0a\x54\xce\x26\xf0\x5a\x1b\xc0\x05\x2b\x4a\x89\x2f\xe0\x16\xa1\x60\x4b\xc8\xd9\x1c\x41\x2b\x8c\xc3\x37\x93\xd3\x30\xa5\xd1\xdc\xa7\xb4\xb4\x60\x54\x4c\x69\x97\x57\x33\x58\xc7\x66\x42\xcd\x92\x0e\x5c\x2d\xf4\xad\x33\x42\xcd\xd6\x5b\x33\x6d\x0a\xe6\xa8\xdd\x1b\xb1\xde\x58\x08\x75\x81\x6a\xe6\xf2\xd1\x29\x7c\xdf\x6a\xba\xdb\xa9\x91\x1e\xa8\xc3\xd6\xb2\xd1\x66\x76\x59\x4e\xd5\xbe\xcb\xb0\xb7\xe9\xf5\x0c\xa4\xb0\x8e\x5c\x38\xc2\x6c\xb4\x44\x1b\x50\x2d\x99\xcb\xe3\xbb\xce\xa6\x40\x87\xbe\x51\x11\xda\xbb\xd2\x3b\x32\x08\xce\x1c\x03\xab\xbd\x49\xd1\x06\xa2\x12\x6a\xc0\x48\xda\x6a\x5f\x57\xd1\x66\x47\xa8\x5a\x9b\x65\x4c\x25\xda\x5e\xe7\x46\x05\xb4\xee\xcd\xad\xb4\xbf\xd1\x5a\xe3\xa7\xde\x42\x36\x7a\x4d\x7f\xa6\xa1\xf6\x61\xf7\x21\x71\x30\x58\x1a\xb4\xa8\x9c\x50\xb3\xc0\x9a\x04\x9c\x75\xda\x60\x4d\xe3\x1f\xa3\x37\xd5\x14\x4a\x90\xcc\x99\x24\x9f\x71\x1a\xfe\xfe\xf1\xec\xea\xe2\xc3\xe4\xf2\xec\xc3\xbf\x6b\xf9\xf3\x8b\x37\x90\xea\xa2\x20\x4d\xfd\x5e\x29\x11\x19\x6f\x8b\x8e\x53\x83\xdc\x8e\xab\x27\xef\xde\x5e\xfc\xf8\x7b\x1f\x7d\xd8\xe9\x26\x95\xcc\x26\x7f\x88\xaf\xbb\xed\xd0\xef\x0f\x17\x89\xf7\xe1\x2a\xd1\x14\xc2\xda\x60\x81\x2e\x67\x0e\x98\x41\xb2\xbb\x59\x1e\xf0\x69\x00\x5c\xe1\xba\x03\x4a\x42\xe3\x19\x41\xd9\x75\x82\x0d\x68\xee\x20\x0c\xb8\x2f\x69\xc0\x1e\x3e\x11\x64\x84\x72\x28\xa5\xf8\x3c\x09\xe8\x47\x36\xd8\x28\xbd\x5a\x68\xdf\xd9\x57\xcb\x1c\x60\xca\x8e\x80\xf2\x52\xae\x3b\x74\xfd\xea\x39\x76\xd3\x6b\x9d\x05\x63\xea\xf3\x26\x2e\xff\x67\x58\x2d\x9f\x72\x25\xa3\x58\xd1\x90\xa2\xb5\xb7\xda\xf0\x3a\x35\x4a\x73\xa6\x66\x94\x41\xfd\xa2\xad\x23\xd9\xcc\xcb\xc0\x8c\xaf\x98\x63\x3f\x19\x51\x86\x5e\x34\x1c\x65\x3e\x0d\x33\x36\x13\x5d\x49\x27\x0a\xe6\x70\xd8\x86\x60\x5b\x58\xe8\xc3\xb8\x4d\xdf\x35\x9c\xf7\xd4\x7a\xd5\x6d\x2b\x31\xb7\x61\xad\x36\x3a\xf1\x5e\xf0\x2d\xeb\xa8\x44\x23\xc4\x13\x4a\xe0\x22\x99\x6e\xec\xb0\x51\x93\xfb\x19\xe6\xb6\x39\xb7\xf7\xd9\x42\xe5\x4e\x77\x0d\xa6\x09\x7f\x75\x0e\x8c\xe1\x1d\x31\x8f\x5b\x96\x22\x0d\xc9\x10\xfd\xc5\x68\x11\xef\xa3\x78\x22\x75\xca\x64\xb2\x28\xe4\x66\x23\xa8\x56\xb2\x07\xa5\xb4\xa4\xb7\x93\xcb\xea\x35\x40\x33\x6b\x98\xad\x54\x7a\x08\x58\x2b\x63\xbf\x7a\xf3\xaa\xa9\x21\xea\x71\x61\xa9\x3d\xdc\xb2\xc8\xc9\xbe\xe4\xe4\x0c\xf0\x9b\xf6\x90\x32\x05\x99\x50\x3c\x96\x32\xd3\x65\x48\x10\x85\x6a\xc7\xcd\x1e\x82\x11\xfa\xaf\x04\xe3\xc6\xb6\x4d\x2d\xc3\xcf\x37\xa8\x63\xc5\xad\xc6\xab\x6e\x9e\xf9\x9c\x28\x36\x12\xa6\xad\x53\xc6\x60\x01\x2c\x4d\x29\xb3\xa7\xc8\x4a\x91\x9e\xc9\x3e\x4f\x1a\xaf\xba\x69\xa8\x3d\x12\xc6\x6c\x25\xc4\x93\x39\x33\x82\xe2\xfa\x76\xe2\xec\xab\x7f\x92\x69\xc9\xd1\x6c\xca\x7c\x5b\x7d\x1b\x67\xce\xb5\x75\x8f\xcd\xb6\x3b\x16\x7a\x5f\x2a\x39\x03\x2e\x0c\xa6\x4e\x9b\x25\x99\x82\x63\x91\x0b\x98\x94\xdb\xcc\xa4\x8a\xd3\x91\x3b\x28\x50\x5f\x55\x55\x29\x71\x86\x8b\x87\x27\x89\xe0\xc8\xc6\xc6\xab\xf3\xae\x85\xc1\xbb\xfe\x70\x54\x99\x2a\x44\x5e\x8d\x6b\x73\x66\x90\xc3\x14\x33\xca\xe0\xa7\x98\xea\x82\x16\x35\x17\x56\x4c\x65\x95\xd2\x0b\xaa\x95\x68\xdf\x4f\x92\xdf\x07\x0d\xf0\x10\x9a\x6f\x0d\x04\xf5\x40\x75\x62\xdd\xd3\x0b\x78\xc5\xd1\xc0\x6d\x2e\xd2\xbc\x1b\x0e\x52\xad\x14\x86\xda\xfe\x29\xa2\xd5\x75\xa0\x43\x60\xaa\xf3\xc9\x4e\x3a\xd9\x44\xc5\xab\x77\x17\xf1\xa4\x4e\x2b\xb9\x0c\x47\x75\x21\x22\x72\x10\xf1\x8c\x8d\xa6\xa5\x62\x9d\xe4\x2a\x6c\x07\x71\x2f\x98\x4b\x73\xa2\xd9\x70\x0c\x18\x00\x3a\xd2\xb0\x78\xe3\xd1\x08\xed\xed\x0f\xcf\xb4\xe6\xd8\x33\x20\x86\x52\x36\xb0\x15\x83\x5f\xab\x2d\xc3\x0f\xf0\xfe\xd7\x0b\xe1\x56\xde\x73\x24\x41\x71\xa5\x53\x7b\x23\x85\xc3\xfb\x44\xb6\x90\xa6\x3e\x72\x64\x1b\x5e\xdf\x7d\xd9\xe0\xb2\x2a\x22\xc8\x89\xd7\xf4\x48\x7a\x8e\xdc\xd8\xd2\x75\x30\x01\x0b\xc2\xd9\x20\xb7\xa3\xc2\x38\x6f\x78\xd4\x26\x71\x95\x4f\x32\xfc\x3c\xbc\xbc\xf0\x4a\xdc\x78\x04\x11\x5c\x25\x13\xd5\x39\x30\x81\xda\x60\xd7\xc0\xda\x2a\x31\xce\x99\x22\x7e\xcd\xb4\x57\x9c\xaa\x0b\xa9\xf5\x35\x85\xee\x8a\x55\xf7\x76\xac\xc7\xc5\xee\x91\xc9\xd3\xe2\x8d\x47\x39\x29\x8d\x3e\x6e\xf6\x24\x8b\x78\x1f\xf6\x0a\x97\x46\x43\x29\x85\x75\xc7\x52\x41\xb4\x74\x18\xf6\xf5\xd4\xc8\x72\x78\x7d\x0f\x21\xcb\x30\xcc\x8a\x22\x5b\x8a\xbd\x1f\x45\xbe\x66\x73\x6d\x84\x43\x9b\x84\x11\xff\x6a\xf4\xd8\xc2\xed\x00\x82\x0c\x90\x1d\x29\x2d\x96\xda\x3a\x91\x1e\x39\x27\xb6\x33\xca\xcb\xb8\xe1\x23\x4d\x27\x6b\x75\x3e\xcd\x64\x72\x68\x75\x8f\x92\x4a\xd6\x4a\x3e\x34\x8f\x5c\xd1\x25\x9f\xfe\xd5\xb8\xb2\xc6\xee\x5b\x26\xb9\x29\x93\xcc\x51\xca\x7d\x09\x73\x98\xb7\x58\x34\xc2\x78\xb0\x36\x43\x85\xa6\x3e\xa0\x63\x10\x86\x87\xd8\x2b\x7e\xef\x5b\x1d\x01\x5a\xc0\x45\xa9\xab\x5b\x48\x43\x47\x21\xb6\x7d\x58\x48\xfa\x50\x78\xdb\xe6\xc1\x2d\x1c\xf7\xd5\x78\xfd\x39\x91\x6b\x7d\x9e\xb5\xe7\xe9\x75\x7d\xe2\xb5\xa7\x38\x59\xc4\x97\xf8\x66\xb0\x99\xe7\xf0\x6f\x03\x73\xec\x5a\xa9\xcd\xb5\x97\xbc\x6b\xcb\x4e\x3f\xc9\x22\xbc\xaf\xc3\x43\x60\x08\xa7\x9a\xd5\x5d\xc0\xc1\x43\xc9\xe0\xb7\x15\x2c\x95\x53\x06\xe1\x7a\xfa\xa7\x08\x4d\xdf\x5e\xbf\x28\x34\xf5\xf4\xc7\x19\x34\x3e\x5b\xad\x1e\x1a\x33\x7e\x7e\xff\xf6\x3f\xc3\x81\xa3\xc5\xfb\x1b\x2e\x71\x7c\xe3\xfe\xe1\x6e\xfb\x72\xff\x2a\x51\x3a\x26\x16\x5f\x59\xd4\x33\xa2\xf0\x96\x2a\x1e\x46\x50\xc2\xb6\x6e\x82\x06\x77\x89\x1f\x03\x3c\x25\x13\xa6\xf2\xb3\x70\x87\x9c\x91\x43\xf5\xf3\x65\x61\x23\x88\xd1\x40\x8f\x34\xe3\x75\x58\x94\x92\x39\x3c\x90\xc0\x5e\x0b\x29\xbb\x05\xb9\x50\xf1\x62\xb5\xd1\x73\xc1\x91\xc3\x4f\x1a\xea\x39\xaa\xaf\xf0\x80\xd0\xad\x1f\x05\x0b\x0d\x74\x66\x84\x72\xb6\xba\x98\x6f\x49\x57\x8e\x8a\x3c\xae\xbd\x8b\xb5\xdd\x79\x6b\x92\xa8\x12\xaa\xf4\x2c\x3a\xd2\x5f\xf8\xf2\x55\xc7\x7c\x1a\x17\x2e\x8c\x48\xa5\x61\x56\xdd\xc2\x4f\xae\xda\x5f\x58\x26\x97\x15\x77\x7e\x17\x2e\x5e\xb2\x39\x13\x92\x02\x58\x02\x57\x4a\x8a\x6b\x0c\xc3\xc5\xdb\xd8\x2d\x58\x5e\x34\xab\xb6\xa1\xdb\xca\x9b\x18\x65\xe3\xc8\xd2\x1c\x9c\xa8\xa6\xe0\x3a\xfc\x4c\x81\x39\xea\x13\xf6\x12\x6e\x01\x95\x06\xe7\x42\x7b\x2b\x97\x80\x0b\x61\xc3\x85\xd0\x6b\x5c\x86\x63\x8e\x42\x73\x91\x2d\x93\x36\x62\x71\x22\xae\x53\x4f\x81\x16\x39\xe4\x68\xf0\x14\xea\xdf\x14\xcc\xb4\x64\x6a\x96\x68\x33\x1b\x97\xd7\xb3\x31\xed\x7c\x5c\x77\x1d\x7f\x8b\x0a\x83\xdd\xb4\xc2\xb7\xd9\x8e\x90\xb0\x83\x79\xf6\x0c\x2c\xd0\xf1\xaf\xed\x91\x83\x5e\x9f\x0e\xa5\xcd\x47\x58\xee\x03\x56\x7a\x50\x74\x2c\xd8\xa2\xa3\xc5\xef\xff\x94\x48\xda\x05\xff\x21\x57\x24\x89\x10\xda\x4c\x16\x53\x35\x4a\x77\xeb\x9f\x31\x65\x22\x1c\x34\x09\x15\x7f\xe0\xb4\x57\x6d\x5e\x2f\xf3\x2b\x44\xda\x46\xd1\xf7\xbf\xc0\x34\xc0\xe8\x8f\x84\xc4\x97\x88\x8b\x03\x4f\xfb\xcf\xd6\x9f\x74\x3f\xb7\x3f\xad\xde\xd7\xef\xe2\xff\xf0\x03\xae\x93\xbb\x93\x93\x93\x93\xff\x07\x00\x00\xff\xff\x4f\x81\xb8\x35\x99\x37\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 14233, mode: os.FileMode(0644), modTime: time.Unix(1579319228, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x43, 0xa9, 0x4c, 0x73, 0x15, 0x50, 0x83, 0x6d, 0x32, 0x29, 0x9f, 0xe1, 0x59, 0xa2, 0x33, 0x2e, 0xfe, 0x8f, 0x11, 0x86, 0x2a, 0x51, 0x21, 0x1, 0xd4, 0xe1, 0xbe, 0x49, 0xfe, 0x60, 0xbd}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
