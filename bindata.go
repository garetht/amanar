// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (10.462kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\x84\xf7\x18\xb8\x78\x7b\xcc\x2d\x48\xb7\xbb\x2d\xb2\xdb\xb4\x49\x0a\x2c\x8a\xc2\xa5\xc5\x91\xc5\x2e\x45\x2a\xfc\xb0\x6b\x2c\xf2\xdf\x17\x43\x52\x96\x14\xcb\x5f\x69\xd3\xb5\xb3\x39\x24\xb2\x38\x1a\x92\xcf\x3c\xf3\xcc\x88\xce\xdf\x27\x00\x99\x5b\xd4\x98\x9d\x41\xc6\x8c\x61\x8b\xec\x94\x6e\x09\x87\x95\xcd\xce\x80\xc6\x3b\x16\x7a\xf2\x15\x73\x17\x4c\x00\x32\xc6\xb9\x70\x42\x2b\x26\xaf\x8c\xae\xd1\x38\x81\xf4\x4c\xc1\xa4\xc5\x64\x62\xf0\xce\x0b\x83\x3c\x3b\x83\x4f\xd9\x8c\x79\xe9\xc6\x8c\x73\x83\xd6\x66\xa7\x90\x6e\xe4\x5a\x15\x62\xea\x0d\x23\x5f\xd9\xe7\xf4\x64\xdd\x75\x19\x97\x01\xf0\xc0\x45\x3b\x00\x90\x71\xb4\xb9\x11\x75\x70\x72\x06\xd9\x4d\x89\x90\xec\xc0\x69\x60\x50\x33\xe3\x44\xee\x25\x33\x10\xbc\x8c\xe0\x23\xfd\x69\x8c\xd0\x82\xb7\x9e\x49\xb9\x00\x2e\x8a\x02\x0d\x14\xda\xa4\x4b\x54\x0e\x50\xcd\x84\xd1\xaa\x42\xe5\xec\x08\x5e\x6b\x03\xf8\x8d\x55\xb5\xc4\x53\x98\x23\x54\x6c\x01\x25\x9b\x21\x68\x85\xd1\xfd\x72\x72\x72\x53\x1b\xcd\x7d\x4e\x4b\x03\xa6\x38\x30\xa5\x5d\x99\x66\xb0\x8e\x4d\x85\x9a\x8e\x12\xa8\x3d\xb8\xad\x33\x42\x4d\xbb\x23\x85\x36\x15\x73\x34\xe6\x8d\xe8\x0e\x54\x42\x5d\xa2\x9a\xba\x32\x3b\x83\xff\xa7\xdb\xf7\xa7\x7d\xd8\xfa\x40\xf7\xc0\x5b\xa5\x40\x1a\xe8\x13\xe1\x81\x75\x8f\x0e\x69\x6c\x3b\x29\x86\xe3\x75\x0e\x52\x58\x07\xba\x48\xf0\x19\x2d\xd1\x06\xb4\x6a\xe6\xca\x78\xd5\xdb\x00\xe8\xf0\x6c\x04\x58\x7b\x57\x7b\x47\x81\xe6\xcc\x31\xb0\xda\x9b\x1c\x2d\xcc\x85\x2b\x85\x1a\x08\x7e\x37\x9c\xa3\xfe\x06\xba\x94\xed\xdc\x07\xc8\x96\xd3\x4f\x24\xda\xde\x43\x4b\x88\x69\xad\xc3\x23\xb4\x9f\xac\x33\xf0\xb9\x37\xe9\x20\xdb\x57\x3d\x3f\x1c\x1b\xa6\x3d\x99\x82\xc1\xda\xa0\x45\xe5\x84\x9a\x82\x2b\x31\x00\x63\x9d\x36\x08\x42\x85\x1b\x1f\x63\x16\xdc\x94\xc2\x82\xb0\x40\xdb\x9e\x31\x49\x5c\x77\x1a\xfe\xf7\xf1\xfc\xf6\xf2\x66\x7c\x75\x7e\xf3\x5b\x63\x7f\x71\xf9\x06\x72\x5d\x55\x14\x89\x2f\x29\x48\xc8\x78\xd7\xf4\x45\x6e\x90\xdb\x17\xe9\xce\x87\x77\x97\xbf\x7c\x19\x3d\x80\x63\x13\xbd\x37\x70\x39\xfe\xdc\xaf\x87\x76\x37\x68\xc8\x74\x15\x9a\x1a\x4d\x25\xac\x0d\x6c\x72\x25\x73\xc0\x0c\x12\x87\xa6\x65\xc0\x62\x09\x56\x8b\xe1\x16\xd8\x68\xe7\x07\x0c\x5b\x9f\xc8\x03\xc8\x6d\x48\x70\xd8\x27\xc9\x61\x0b\xb7\xc3\xb8\x50\x0e\xa5\x14\x5f\xc7\x01\xdd\x98\xb9\x83\x96\xed\xc2\x3e\x35\x42\x05\x99\xf2\x52\x66\x9f\x1f\x4e\x3a\x14\xff\x73\x29\xf5\xdc\xc2\x9b\x38\xdd\x5b\x68\xa7\x03\x6f\xd1\x28\x56\x2d\x05\xc7\xda\xb9\x36\x3c\x14\x8e\x09\x42\x5e\x32\x35\x45\x3e\x82\xdf\xb5\x75\x64\x5b\x78\x19\x54\xe7\x15\x73\xec\x57\x23\xea\xf0\x14\xb9\x9b\x30\xdb\xaa\xce\x72\xa2\x5b\xe9\x44\xc5\x1c\xae\xc6\x14\xd6\x49\xec\xee\xb1\x78\x44\x44\xd2\x23\x6b\x85\xae\x0b\x61\xda\xd4\xd8\x7b\xc1\xd7\xcc\x9d\xcc\x22\x94\xe3\x42\x48\x8c\x62\x35\x68\x3c\x18\xa9\xed\x24\xd9\x34\xcf\x7a\xfb\x0d\xf2\xe8\x74\x9f\x08\xcb\x92\x41\x7e\x29\xbb\x31\x5c\x51\x86\xbb\x45\x2d\xf2\xd0\x18\xd0\x6f\x8c\x91\xbe\x8e\xe6\x23\xa9\x73\x26\x47\xdf\x2a\x39\x1c\xdc\xb4\x8a\x2d\xa9\xdb\xb1\x5c\x9f\xc4\xed\xcf\xfd\xc6\x38\xb4\xe1\xda\x17\x98\x96\xb0\xb7\x6f\x5e\x05\x82\x37\x75\x83\x7c\xc2\x42\x7b\x98\xb3\xa8\x73\xbe\xe6\x44\x68\xf8\x53\x7b\xc8\x99\x82\x42\x28\x0e\x8e\x24\x71\xb2\x08\x8d\x91\x50\xdd\xba\xb3\x82\x56\x84\xf9\x27\x42\x36\x78\x7f\xe8\xee\xea\xbd\x01\xb8\x5b\xcd\x32\x5e\xf5\xfb\xaa\xa7\x94\xae\x28\x44\xb6\x69\x73\x42\x54\x58\x9e\x53\x97\x49\x15\x84\x2a\x1a\x93\xab\xfa\x63\xbc\xea\xb7\x4e\xf6\x08\x95\xa8\xd3\xb0\x8d\x67\xcc\x08\xaa\x5d\xeb\x05\x69\x35\x2c\xe3\x42\x4b\x8e\x66\xa8\x43\xeb\xe2\xde\x24\x50\xa9\xad\x7b\x0a\x05\xdb\xb2\xb0\x7d\x52\xf6\x1c\xb8\x30\x98\x3b\x6d\x16\x14\x5e\xc7\x62\xce\x31\x29\x37\x85\x3e\xd5\xb4\x98\xa3\x54\xd4\x6e\xd3\x5b\x0f\xe5\xa6\x43\x4e\x6d\xcb\x48\x70\x64\x2f\x8c\x57\x17\x7d\xd6\xc0\x87\x55\x77\xf4\xe6\xa3\x10\x79\xf2\x6b\x4b\x66\x90\xc3\x04\x0b\xea\x34\x27\x98\xeb\x8a\x16\x35\x13\x56\x4c\x64\x6a\x3d\x05\xf5\xec\xb4\xe7\x83\xd0\xcc\x41\x62\xed\x2b\x9d\x1d\x27\xd0\x38\x69\x1a\xc0\x95\x18\x80\x57\x1c\x0d\xcc\x4b\x91\x97\x7d\x89\xcd\xb5\x52\x18\xde\x13\x0f\x01\x99\x7e\x32\xec\x0b\x49\xd3\x53\xf5\x5a\xaa\x65\x55\xb9\xfd\x70\x09\x73\x21\x25\x68\x25\x17\x44\x9c\x58\x51\x38\x88\x22\x8c\xd3\x94\xf4\x32\x48\x76\x09\xc7\x41\x8c\x2b\xe6\xf2\x92\x24\x91\x58\x15\x01\x39\xe2\xb2\x72\xe7\xd1\x08\xed\xed\xcb\x9f\xd4\x0b\xef\x58\x50\xc2\x2b\x4f\x50\x06\x06\xef\xd3\x12\xe1\x25\x5c\xbf\xbf\x14\xae\x65\xef\x11\x16\x95\x16\x6f\x7b\x27\x85\xc3\x5d\xab\x43\x68\xaf\x9e\xa0\x3a\x0c\xaf\x67\x9f\xcc\xbb\x4a\xcd\x2d\x25\xcc\x83\xf8\x50\xfc\xa2\xe6\x74\x62\x18\x42\x6b\x41\x38\x1b\xec\xb6\x74\xbe\x17\x4b\x7d\xb2\xa3\xb8\xc2\x83\x90\xf0\xef\x6b\x7b\xbd\x12\x77\x1e\x41\x04\xba\x17\x22\x9d\xcb\x11\x80\x4b\x9c\x96\x10\x76\x5a\xdf\x0b\xa6\x48\xb7\x0a\xed\x15\xa7\xae\x57\x6a\xfd\x17\x95\xba\xa4\x56\x3b\x25\xc7\xd3\xe0\xf4\x83\x45\xc9\xe2\x9d\x47\x39\xae\x8d\x3e\x2c\x55\xa2\x28\x5d\x87\xb5\xc1\x95\xd1\x50\x4b\x61\xdd\x31\x76\xb6\x1d\x7c\xc3\x1e\xfe\x6d\x11\x1a\x5e\xcf\x63\x45\x28\xb8\x68\xa5\xa7\x13\xb0\xfd\xa4\xe7\x35\x9b\x69\x23\x1c\xda\x51\xf0\xf8\x9c\x65\xa7\x83\xd1\x23\x84\x27\xc0\x73\xc4\x72\x53\x6b\xeb\x44\x7e\x60\x5a\xd3\xed\x80\xae\xe2\x02\x9f\x41\xfb\xd3\x40\x7d\x18\xcd\xcf\xd0\x6a\x7e\x78\xeb\xd3\x04\xef\xb1\x7d\x4f\x2b\x43\x7c\xf2\x9c\x35\xa8\xc1\xe9\xbf\xdd\xf9\x94\x28\xe5\x2e\x42\x34\xac\x2d\x2c\x12\x2a\x1e\x8c\x4c\x51\xa1\x69\x0e\x58\x18\x04\xd7\x10\x9f\x8a\xdf\x39\xa5\x23\x1c\x0b\xf8\xad\xd6\xc6\x59\x7a\xfb\x1d\x7a\xe5\xb5\xdd\xc3\x1e\xc2\x5b\xe1\xbc\xab\x55\x6b\x74\x68\x2f\xad\x3c\x64\xd1\x6a\xce\x15\x76\x38\x05\x6c\x4e\x1d\x76\x30\xa5\x48\x3d\xd5\xb7\x16\x4b\xdf\x8f\xfb\xa6\xa2\xc4\x3e\x5b\x6c\xa9\xbd\xe4\x7d\x4e\x39\x7d\x10\x2f\x62\xab\xb1\xd9\x77\xcb\xe1\xc4\x48\x17\xeb\x0f\x7c\x42\xae\x24\x08\x52\x22\x04\xe3\x66\xea\x43\x80\x61\x95\x77\x3f\x0d\x86\x66\xea\xe3\x15\xdd\xaf\x56\xab\xef\xd1\xdc\xb7\xd7\xef\xfe\x18\x16\xde\x8e\x6e\xae\xf9\xc2\xf7\xb9\x6b\x67\x5b\xe8\x8f\x55\x09\xdb\xe8\x1e\xb0\x0c\x76\x60\x7e\x7c\xe2\x0b\xdb\xf9\x4f\xa8\x40\xd3\xf8\x31\x40\x51\x33\x61\x12\xbf\xbd\x45\x0e\x8c\x88\xbc\xda\xc7\x09\x1b\x01\x8b\x64\x3b\x96\x4e\xec\x64\xd3\xe7\xee\xa7\xf6\xba\xb9\x8a\x7f\xe9\xf7\xfd\xc9\xfd\xc9\x3f\x01\x00\x00\xff\xff\x50\x6d\xd1\xd1\xde\x28\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 10462, mode: os.FileMode(0644), modTime: time.Unix(1578966060, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0xab, 0xa9, 0x58, 0x6f, 0xd3, 0x31, 0x41, 0x31, 0xe3, 0x4a, 0xf2, 0x51, 0xb6, 0xd8, 0x9e, 0xfa, 0x25, 0x5, 0x51, 0x6b, 0xc8, 0xc0, 0x8f, 0xd7, 0x1d, 0x79, 0x61, 0xa, 0x5d, 0x55, 0xe1}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
