// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (15.299kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x18\xf8\x0e\xb8\xdb\x43\x62\x63\xf7\x31\x6f\x41\xba\xdd\xeb\x22\x7b\xcd\xb6\xcd\x02\x8b\x43\xce\x4b\x8b\x23\x8b\x0d\x45\x2a\x24\xe5\xd8\x28\xf2\xdd\x0f\x43\x4a\xb2\xfe\xda\x4e\xd2\xb4\x89\x5b\x3d\x24\xb6\xc4\x3f\xa3\xdf\xcc\xfc\x66\x86\x26\x3f\x8d\x00\xc6\x6e\x9d\xe1\xf8\x04\xc6\x7a\xfe\x11\x23\x37\x3e\xa2\x7b\x06\x6f\x72\x61\x90\x8f\x4f\xe0\xbf\x23\x00\x80\x31\x4b\x99\x62\x66\x16\x69\x15\x8b\x45\x6e\x98\x13\x5a\x8d\x47\x00\x57\xbe\x7d\xc6\x9c\x43\xa3\x2e\x8c\xce\xd0\x38\x81\x76\x7c\x02\x9f\x42\xc7\xff\xad\x8e\x27\xff\xaa\xbe\x02\x8c\x39\xda\xc8\x88\xcc\x0f\x70\x02\xe3\x4d\x1f\xc8\x0c\xc6\x62\x85\x1c\x6e\x85\x4b\x60\x75\x0c\xb7\x42\x4a\x98\x23\x30\x29\xf5\x2d\x72\x10\x0a\x5c\x82\xe0\x74\x06\x12\x97\x28\x41\xc7\xe0\x12\x61\xc1\x46\x09\xa6\xec\x08\xe6\xb9\x0b\x9d\x94\x76\xd4\x31\xb7\xc8\x41\x1b\x88\x12\x8c\xae\x91\x4f\xe0\x03\xb5\xf6\xc3\x59\x88\xb5\x01\xa6\xa2\x44\x1b\x0b\x4e\x53\x73\xa1\x2c\x1a\x87\xdc\x3f\xa2\x99\x0c\xe6\x16\x69\x96\x8c\x19\x67\xc3\x74\x08\x7f\x9e\xfe\x76\x0e\xb1\x90\x58\x8c\x47\x43\x2a\x26\xf5\x42\xe7\x7e\x24\xa6\x38\xcc\x99\x9f\x5a\xc1\x2b\x1d\x5d\xa3\x81\x33\x9d\x66\xda\xe2\x3f\x2c\xfc\xbc\x72\xa8\xac\xd0\x0a\x5e\x0b\x94\xdc\xc2\x3f\x13\xe7\x32\x7b\x32\x9d\x72\x1d\xd9\x09\xf7\xed\x27\x91\x4e\xa7\x51\xe8\x53\xfe\x3f\xa6\x29\xa7\x7f\xc3\xb2\xff\x71\xec\xfb\xff\x30\x19\x7b\x68\xef\x46\x00\x77\x5e\x1b\x8c\x73\x41\xf0\x32\xd9\x50\x48\xcc\xa4\xc5\xa0\xae\x1e\x3d\xf5\x2a\xb8\xa6\xb6\xd2\x4c\x98\x31\x6c\xed\xad\xc4\xdf\x16\x0e\x53\x5b\x6b\xd7\x6f\x50\xc5\x13\xad\xf0\x6d\x5c\xd9\x54\xb8\x3e\xd5\x3e\xb7\x2c\x6f\xbc\x64\xb9\x74\x33\xc6\xb9\x41\x6b\xc7\x47\x50\xdc\x68\xca\x78\x55\x1b\xe0\xee\x68\xcf\x91\x23\xad\xac\x63\xca\x35\x7b\x57\x9f\xaf\x6a\x42\xf7\x80\x55\x3c\xa9\x06\x39\x69\xcf\xd5\xb2\xf1\x53\x8f\xad\xb7\x93\xb9\x24\xfb\x05\x83\x8a\xa3\x81\x72\x04\x7b\x04\xb7\x89\x88\x12\x60\x06\x21\x13\x18\xa1\x37\x36\xa1\x62\x6d\x52\xff\x9a\xe0\x12\xe6\x80\x6b\x6f\xd9\x1c\x33\x54\xde\xba\xfe\x20\x40\x9a\x66\x5d\x4c\x16\x2c\xda\x3b\x80\xd3\x50\x42\x86\x20\x75\xc4\x24\x58\xc7\x9c\x88\x20\x32\xc8\x51\x39\xc1\xa4\x25\xe7\x2a\x0d\x87\x7a\xf8\x91\x8f\x39\x1a\xb1\xf4\x86\x8c\x76\x32\x3e\x6a\xbe\xe5\xa0\xa2\x07\x95\xdd\x55\x4b\x47\x35\x9d\xa7\x34\x11\xa6\x99\x64\x0e\x67\x19\x73\xc9\xb8\xd3\xe2\xaa\x75\xe7\xee\xe8\xf3\x4d\xb9\xc7\x6c\x8d\xef\x57\x2d\x14\x76\xf9\x62\xad\xe9\xa0\xa1\x35\x05\xea\x3e\xeb\x31\xb8\xca\xb2\xe0\x17\x0d\x65\x57\xb0\xce\x08\xb5\x08\xa6\x54\x72\x6b\xb0\x44\xe4\x6d\xed\x42\x5d\xc3\xa1\x63\x1b\x8b\x0e\xce\x2d\x45\xed\x27\x29\x35\xf5\xac\xd9\x10\x95\xb8\xee\xf3\x09\x3a\x1a\xfa\xd6\x78\x85\x16\xdf\xec\xf2\xea\x0f\x09\x42\xd1\x36\xc8\x4f\x41\x42\x44\xb9\x64\x06\x96\xc1\x2f\xbd\x13\x95\x8d\xd0\x42\x6e\x73\x26\xe5\x1a\xb8\x88\x63\x34\x3e\xcc\x84\x8f\xa8\x1c\xa0\x5a\x0a\xa3\x55\x8a\xca\xd9\x09\xbc\xd6\x06\x70\xc5\xd2\x4c\xe2\x11\xdc\x22\xa4\x6c\x0d\x09\x5b\x22\xb9\x62\x18\xbe\x9a\x9c\x86\xc9\x8c\xe6\x79\xe4\x9d\x97\xc2\x0f\x53\xda\x25\xc5\x0c\xd6\xb1\x85\x50\x8b\x41\xf7\x2d\x30\x6b\x3d\x0d\xcc\x43\xcf\x73\x23\xda\x0f\x53\xa1\xce\x51\x2d\xbc\x8e\x7f\xdc\x01\xe7\x50\x44\x69\x49\xd1\x8c\x2b\xc5\xc3\x6e\x74\x69\xf5\xea\xa5\x9e\x7b\xb9\x5d\x9f\x49\x4a\x61\x1d\xf1\x6f\x80\xd9\x68\x89\xd6\xa3\x4a\xa6\x1a\x3e\x35\x5e\x0a\xb4\xef\x1b\x14\xa1\x73\x97\xe5\x8e\x0c\x82\x33\xc7\xc0\xea\xdc\x10\x9b\x53\x4a\x43\x0c\xdb\x31\x92\xba\xda\xbb\xa6\xbd\x9d\xa7\xc6\x95\x18\x73\x89\xb6\xcf\x2f\x82\x0a\xbc\x37\x0e\x3e\xa5\xf7\x6b\x7b\xcc\x55\x47\x90\xad\xec\xd4\x9c\xa9\xef\x79\xbf\xfb\x78\xdf\x37\x98\x19\xb4\x14\x86\x3c\x37\xa1\x07\xce\x3a\x6d\xb0\x4c\xf8\xea\x51\x4e\x58\x20\x48\x96\x4c\x92\xcf\x38\x0d\x7f\xff\xe3\xf4\xf2\xfc\xc3\xec\xe2\xf4\xc3\xbf\xcb\xf6\x67\xe7\x6f\x20\xd2\x69\x4a\x9a\xfa\xab\x50\x22\x32\x5e\x6f\x3a\xa5\xd0\x67\xa7\xc5\x9d\x77\x6f\xcf\x7f\xfe\xab\x8f\x58\x76\xb9\x49\xd1\x66\xc8\x1f\xc2\xd5\xe1\xc9\x26\xf4\xfb\xc3\x45\xcd\xbb\x70\x65\x68\x52\x61\xad\xb7\x40\xcf\x98\x94\x44\x58\x9d\x2f\x12\x8f\x4f\x05\xe0\x06\xd7\x1d\x50\x12\x1a\x2f\x08\xca\xa6\x13\x0c\xa0\xb9\x83\x30\xe0\xbe\xa4\x01\x7b\xf8\x84\x6f\x23\x94\x43\x29\xc5\xc7\x99\x47\x3f\xb0\xc1\x60\xeb\x8d\xa0\x7d\x49\x49\x29\x66\x0f\x53\x36\x1a\xa8\x5c\xca\x6e\xde\x12\xae\x8e\x63\x57\xbd\xda\x2c\x18\xb2\xc9\x37\x41\xfc\x5f\x61\x23\x3e\x25\x95\x46\xb1\xb4\x22\x45\x6b\x6f\xb5\xe1\x65\x11\x15\x25\x4c\x2d\xa8\xd6\xfa\x4d\x5b\x47\x6d\xe3\x5c\x7a\x66\x7c\xc5\x1c\xfb\xc5\x88\xcc\xf7\xa2\xe1\xa8\x46\xaa\x98\xb1\x9a\xe8\x52\x3a\x91\x32\x87\xfd\x36\x04\xdb\xc2\x42\x17\xc6\x6d\xfa\x2e\xe1\xbc\xa7\xd6\x8b\x6e\x3b\x12\xc8\x0d\xac\xc5\x8b\xce\xf2\x5c\xf0\x2d\x72\x14\x4d\x03\xc4\x33\x4a\x7f\x06\xb2\xdd\xf2\x1a\xd4\xe4\x7e\x86\xb9\x6d\xce\xed\x7d\xb6\x50\xb9\xd3\x4d\x83\xa9\xc2\x5f\x59\x2d\x17\x89\x9d\xb0\xe0\xd6\x99\x88\x7c\x32\x44\x7f\x31\x58\xc4\xfb\xd0\x7c\xe2\x8b\x94\xc9\x2a\x95\xc3\x46\x50\x48\xb2\x07\xa5\xd4\x5a\x6f\x27\x97\xcd\xd5\x43\x33\x2d\xcc\x36\x2a\x7d\x08\x58\x1b\x63\xbf\x7c\xf3\xaa\x5a\x6d\x28\xc7\x85\xb5\xce\xe1\x96\x05\x4e\xce\x33\x4e\xce\x00\x7f\xea\x1c\x22\xa6\x20\x16\x8a\x87\x45\x8f\xf9\xda\x27\x88\x42\xd5\xe3\x66\x07\xc1\x00\xfd\x57\x82\x71\xf0\xd9\xd0\x93\xfe\xfb\x03\xea\xd8\x70\xab\xc9\x55\x33\xcf\x7c\x49\x14\x1b\x08\xd3\x96\x29\xa3\xb7\x00\x16\x45\x94\xd9\xd7\xeb\xf3\x36\x4f\x9a\x5c\x35\xd3\xd0\x4e\x81\x5e\x47\xea\x05\x31\x66\x2d\x21\x9e\x2d\x99\x11\x14\xd7\xb7\x13\x67\x57\xfd\xb3\x58\x4b\x8e\x66\x28\xf3\xad\xf5\xad\x9c\x39\xd1\xd6\x3d\x35\xdb\xee\x10\xf4\xbe\x54\x72\x0a\x5c\x18\x8c\x9c\x36\x6b\x32\x05\xc7\x02\x17\x30\x29\xb7\x99\x49\x11\xa7\x03\x77\x50\xa0\xbe\x2c\xaa\x52\xe2\x0c\x17\x96\x59\x27\x82\x23\x9b\x9a\x5c\x9d\x35\x2d\x0c\xde\x75\x87\xa3\xca\x54\x61\x58\x67\x9a\x23\xd8\x84\x19\xe4\x30\xc7\x98\x32\xf8\x39\x46\x3a\x25\xa1\x96\xc2\x8a\xb9\x2c\x52\x7a\x41\xb5\x12\xbd\xf7\xb3\xe4\xf7\x5e\x03\x7c\x08\xcd\xd7\x06\x82\x72\xa0\x32\xb1\xee\xe8\x05\x72\xbf\x24\x18\xd6\x01\x1b\xe1\x20\xd2\x4a\xa1\xaf\xed\x9f\x23\x5a\x4d\x07\x7a\x08\x4c\x65\x3e\xd9\x48\x27\xab\xa8\x78\xf9\xee\x3c\xac\x01\x69\x25\xd7\x7e\x4d\xd3\x47\x44\x0e\x22\xac\xc6\xd3\xb4\x54\xac\x53\xbb\x02\xdb\x5e\xdc\x53\xe6\xa2\x84\x68\xd6\xff\x60\xe0\x01\x3a\xd0\xb0\x78\x93\xa3\x11\x3a\xb7\x3f\xbd\xd0\x9a\x63\xcf\x80\xe8\x4b\x59\xcf\x56\x0c\x7e\x2f\x5e\x19\x7e\x82\xf7\xbf\x9f\x0b\xb7\xf1\x9e\x03\x09\x8a\x1b\x9d\xda\x1b\x29\xca\x15\xd6\x7b\xa4\xa9\x4f\x1c\xd9\xfa\xe5\xbb\x2f\x1b\x5c\x14\x45\x04\x39\x71\x4b\x8f\xa4\xe7\xc0\x8d\x35\x5d\x7b\x13\xb0\x20\x9c\xf5\xed\x76\x54\x18\x67\x15\x8f\xda\x49\x90\xf2\x59\x86\x9f\xc7\x97\x17\xb9\x12\x37\x39\x82\xf0\xae\x12\x8b\x62\x1d\x98\x40\xad\xb0\xab\x60\xad\x95\x18\x67\x4c\x11\xbf\xc6\x3a\x57\x9c\xaa\x0b\xa9\xf5\x35\x85\xee\x82\x55\xf7\x76\xac\xa7\xc5\xee\x89\xc9\xd3\xe2\x4d\x8e\x72\x96\x19\x7d\xd8\xec\x49\x16\xf1\xde\xbf\x2b\x5c\x18\x0d\x99\x14\xd6\x1d\x4a\x05\x51\xd3\xa1\x7f\xaf\xe7\x46\x96\xfd\xf2\x3d\x86\x2c\xfd\x30\x1b\x8a\xac\x29\xf6\x7e\x14\xf9\x9a\x2d\xb5\x11\x0e\xed\xc4\x8f\xf8\xad\xd1\x63\x0d\xb7\x07\x10\xa4\x87\xec\x40\x69\x31\xd3\xd6\x89\xe8\xc0\x39\xb1\x9e\x51\x5e\x84\x17\x3e\xd0\x74\xb2\x54\xe7\xf3\x4c\x26\xfb\xa4\x7b\x92\x54\xb2\x54\xf2\x43\xf3\xc8\x0d\x5d\xf2\xf9\xb7\xc6\x95\x25\x76\xdf\x33\xc9\xa1\x4c\x32\x41\x29\xf7\x25\xcc\x7e\xde\x62\xc5\x3e\x18\xbf\xb0\xb6\x40\x85\xa6\x5c\xa0\x63\xe0\x87\x87\xd0\x2b\xfc\xee\x5b\x2c\x01\x5a\xc0\x55\xa6\x8b\xfd\x8a\x7d\x4b\x21\xb6\xbe\x58\x48\xfa\x50\x78\x5b\xe7\xc1\x2d\x1c\xf7\xd5\x78\xfd\x25\x91\x6b\xb9\x9e\xb5\xe7\xea\x75\xb9\xe2\xb5\x67\x73\xb2\x88\x2f\xf1\xcb\x60\x35\xcf\xc3\x7f\x0d\x4c\xb0\x69\xa5\x36\xd1\xb9\xe4\x4d\x5b\x76\xfa\x59\x16\xe1\x5d\x1d\x3e\x04\x06\xbf\xaa\x59\xec\x1a\xee\x5d\x94\xf4\x7e\x5b\xc0\x52\x38\xa5\x6f\x5c\x4e\xff\x1c\xa1\xe9\xda\xeb\x17\x85\xa6\x9c\xfe\x30\x83\xc6\x47\xab\xd5\x63\x63\xc6\xaf\xef\xdf\xfe\xa7\x3f\x70\xd4\x78\x7f\x60\x13\xc7\x77\xee\xef\xef\xb6\x2f\xf7\x6f\x12\xa5\x43\x62\xf1\x8d\x45\xbd\x20\x0a\xaf\xa9\xe2\x71\x04\x25\x6c\x6d\x27\xa8\x77\x97\xf0\xd5\xc3\x93\x31\xd1\xd8\x6c\xcf\xc8\xa1\xba\xf9\xb2\xb0\x01\xc4\x60\xa0\x07\x9a\xf1\x56\xdb\xbf\x1f\x46\x60\xaf\x85\x94\xb6\x75\x26\x21\x6c\xac\x36\x7a\x29\x38\xf2\xbe\xcd\xec\x84\x6e\x63\xd3\xb8\xa7\x33\x23\x94\xb3\xc5\x11\x1e\x4b\xba\x72\x54\xe4\x71\x9d\xbb\x50\xdb\x9d\xd5\x26\x09\x2a\xa1\x4a\xcf\xa2\x23\xfd\xf9\x1f\x5f\x75\xc8\xa7\x71\xe5\xfc\x88\x54\x1a\xc6\xc5\x79\x9d\xc9\x65\xfd\x07\xcb\xc9\x45\xc1\x9d\x3f\xf8\x8d\x97\x6c\xc9\x84\xa4\x00\x36\x81\x4b\x25\xc5\x35\xfa\xe1\xc2\x6e\xec\x1a\x2c\x47\x95\xd4\xd6\x77\xdb\x78\x13\xa3\x6c\x1c\x59\x94\x80\x13\xc5\x14\xc5\xb1\x0f\xe6\xa8\x8f\x7f\x17\xbf\x0b\x28\x33\xb8\x14\x3a\xb7\x72\x0d\xb8\x12\xd6\x6f\x08\xbd\xc6\xb5\x5f\xe6\x48\x35\x17\xf1\x7a\x52\x47\x2c\x4c\xc4\x75\x94\x53\xa0\x45\x0e\x09\x1a\x3c\x81\xf2\xf4\xd1\x42\x4b\xa6\x16\x13\x6d\x16\xd3\xec\x7a\x31\xa5\x37\x9f\x96\x5d\xa7\xdf\xa3\x42\x6f\xb7\xa1\x33\x2e\xf5\x6b\x07\xf3\xec\x19\x58\x00\x76\x9f\x83\xa9\x5f\xed\x53\x2a\xf5\x6b\x2b\x6d\x3e\x81\xb8\x8f\x90\xf4\x41\xd1\x31\x65\xab\x86\x16\x7f\xfc\x2c\x91\x74\xf7\xd9\x96\x46\xf3\x2d\x5b\x24\x89\x10\xb6\x9f\x75\x89\x85\x5f\x68\x12\x2a\x1c\x85\xdc\xab\x36\x2f\xc5\xfc\x0a\x91\x76\xeb\xd9\xa4\x6d\xa8\x9c\xee\x3c\x9e\xf4\xf9\x90\xf8\x12\x71\xb1\xe7\x6e\xf7\x5e\xfb\xce\x96\xd3\x49\xa3\xf6\xa7\xf0\xdf\x1f\xf5\x1c\xdd\x8d\x46\xa3\xd1\xff\x03\x00\x00\xff\xff\x2c\x79\xd2\xdf\xc3\x3b\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 15299, mode: os.FileMode(0644), modTime: time.Unix(1579323657, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x32, 0x80, 0x6c, 0x61, 0x25, 0xe2, 0xbe, 0xed, 0x54, 0x3, 0x87, 0x40, 0x6e, 0x7a, 0x82, 0x24, 0x3b, 0xdd, 0x3b, 0xb3, 0x22, 0x5f, 0x6, 0x17, 0xa8, 0xf7, 0xa8, 0xc5, 0x3d, 0x27, 0xf5}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
