// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (16.099kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xf0\x1d\x70\xb7\x87\xd4\xc6\xee\x63\xde\x82\xec\x76\xaf\x8b\xec\x35\xdb\x36\x0b\x2c\x0e\x3d\x2f\x2d\x8e\x2c\x36\x14\xa9\xf2\xc3\xb1\x51\xf4\x7f\x3f\x0c\x29\xc9\xfa\xf2\x47\x9c\xa6\xeb\xba\xd5\x43\xeb\x88\x43\x72\xf4\x9b\x99\xdf\x0c\x29\xf1\xc3\x19\xc0\xc8\xad\x0a\x1c\x5d\xc0\x48\xcf\xde\x61\xe2\x46\xe7\x74\xcf\xe0\x7b\x2f\x0c\xf2\xd1\x05\xfc\xf7\x0c\x00\x60\xc4\x72\xa6\x98\x99\x26\x5a\xa5\x62\xee\x0d\x73\x42\xab\xd1\x19\xc0\xdb\x20\x5f\x30\xe7\xd0\xa8\x1b\xa3\x0b\x34\x4e\xa0\x1d\x5d\xc0\x87\xd8\xf1\x7f\xcb\x67\xe3\x7f\xd5\x7f\x02\x8c\x38\xda\xc4\x88\x22\x0c\x70\x01\xa3\x75\x1f\x28\x0c\xa6\x62\x89\x1c\xee\x85\xcb\x60\xf9\x0c\xee\x85\x94\x30\x43\x60\x52\xea\x7b\xe4\x20\x14\xb8\x0c\xc1\xe9\x02\x24\x2e\x50\x82\x4e\xc1\x65\xc2\x82\x4d\x32\xcc\xd9\x39\xcc\xbc\x8b\x9d\x94\x76\xd4\xd1\x5b\xe4\xa0\x0d\x24\x19\x26\x77\xc8\xc7\xf0\x86\xa4\xc3\x70\x16\x52\x6d\x80\xa9\x24\xd3\xc6\x82\xd3\x24\x2e\x94\x45\xe3\x90\x87\x26\x9a\xc9\xa0\xb7\x48\xb3\x14\xcc\x38\x1b\xa7\x43\xf8\xe3\xf2\xd7\x6b\x48\x85\xc4\x72\x3c\x1a\x52\x31\xa9\xe7\xda\x87\x91\x98\xe2\x30\x63\x61\x6a\x05\x3f\xea\xe4\x0e\x0d\x5c\xe9\xbc\xd0\x16\xff\x61\xe1\xa7\xa5\x43\x65\x85\x56\xf0\x5c\xa0\xe4\x16\xfe\x99\x39\x57\xd8\x8b\xc9\x84\xeb\xc4\x8e\x79\x90\x1f\x27\x3a\x9f\x24\xb1\x4f\xf5\xff\x33\x9a\x72\xf2\x37\xac\xfa\x3f\x4b\x43\xff\xef\xc6\xa3\x00\xed\xc7\x33\x80\x8f\xc1\x1a\x8c\x73\x41\xf0\x32\xd9\x32\x48\xca\xa4\xc5\x68\xae\x01\x3b\x0d\x1a\xb8\x61\xb6\xca\x4d\x98\x31\x6c\x15\xbc\x24\xdc\x16\x0e\x73\xdb\x90\x1b\x76\xa8\xb2\x45\x2b\x7c\x99\xd6\x3e\x15\xaf\x0f\x8d\xdf\x43\x9e\xd7\x68\x5b\x30\x2f\xdd\x94\x71\x6e\xd0\xda\xc6\xb8\xad\xe6\x9e\x87\xae\xaf\xb7\x8d\xbf\x3e\x9e\x1f\xa6\x43\xa2\x95\x75\x4c\xb9\x2d\x23\xd7\xbf\xdf\x36\x1e\x7d\x00\xf2\xee\x88\x17\x5d\x3d\x3a\x91\x72\x19\x2c\x14\xbc\x6d\x26\x29\x0a\xc0\xa0\xe2\x68\xa0\x1a\xc1\x9e\xc3\x7d\x26\x92\x0c\x98\x41\x28\x04\x26\x18\x5c\x56\xa8\x54\x9b\x3c\xe0\x01\x2e\x63\x0e\xb8\x0e\xf1\xc1\xb1\x40\x15\x7c\xf4\x77\x42\xae\x1d\x1c\xe5\x64\x31\x2e\x42\x18\x39\x0d\x15\xb6\x08\x52\x27\x4c\x82\x75\xcc\x89\x04\x12\x83\x1c\x95\x13\x4c\x5a\x0a\xd1\xca\xfd\xa8\x47\x18\xf9\x19\x47\x23\x16\x21\x1c\xd0\x8e\x3b\x86\xdb\xec\x2e\xb0\xc9\x65\xfa\x26\xdb\x65\xb6\x38\x11\xe6\x85\x64\x0e\xa7\x05\x73\xd9\xa8\x27\xf1\xb6\x73\xe7\x63\xd7\xc1\x1e\x31\xe5\x1e\xb3\xb5\xfd\xa9\x83\xc2\xae\x88\x6e\x88\x6e\x74\xb4\xb6\x42\xfd\xb6\x01\x87\xab\x3d\x0b\x7e\xd6\x50\x75\x05\xeb\x8c\x50\xf3\xe8\x4a\x15\x43\x47\x4f\x44\xde\xb5\x2e\x34\x2d\x1c\x3b\x76\xb1\xe8\xe1\xdc\x31\xd4\x7e\x9a\x92\x68\xe0\xde\x96\xaa\xc4\x98\x9f\x4e\xd1\xb3\x4d\x7f\xb5\x1e\xa1\x43\x53\xbb\xa2\xfa\x4d\x86\x50\xca\x46\xfd\x29\xd5\x88\xc4\x4b\x66\x60\x11\xe3\x32\x04\x51\x25\x84\x16\xbc\xf5\x4c\xca\x15\x70\x91\xa6\x68\x42\xb2\x8a\x3f\x51\x39\x40\xb5\x10\x46\xab\x1c\x95\xb3\x63\x78\xae\x0d\xe0\x92\xe5\x85\xc4\x73\xb8\x47\xc8\xd9\x0a\x32\xb6\x40\x0a\xc5\x38\x7c\x3d\x39\x0d\x53\x18\xcd\x7d\x12\x82\x97\x92\x18\x53\xda\x65\xe5\x0c\xd6\xb1\xb9\x50\xf3\x8d\xe1\x5b\x62\xd6\x69\x8d\xcc\x43\xed\xde\x88\x6e\x63\x2e\xd4\x35\xaa\x79\xb0\xf1\xf7\xbb\xe0\xf4\x03\xae\x30\x42\xe5\x73\x8a\xbd\x91\xd3\x77\xa8\x46\xe7\x30\x9a\x0b\x97\xf9\x19\xfd\x62\xf7\x76\x2a\x58\x3e\xea\xc6\x52\x07\xff\x12\x5c\xef\x32\xc8\xd1\x65\xba\xe7\x19\x5b\xbc\x62\x48\xd1\x4d\x09\xb4\x33\x58\x3b\x8d\x96\x8d\xfd\x64\xda\xe9\x35\xc8\x91\x0f\xe2\x87\xa1\xd8\x91\xc2\x3a\x4a\x14\xd1\x1f\x8c\x96\x68\x83\xf9\x29\xa6\xe2\xaf\xd6\x43\x81\x0e\x7d\xa3\xc7\x68\xef\x0a\xef\xc8\x73\x39\x73\x0c\xac\xf6\x86\xd2\x0e\x55\x70\x94\x0a\x7a\xde\xdc\xf4\xcf\x7e\x0c\x6e\x27\xd4\x51\xad\xc6\x4c\x62\xbf\x00\xa8\x4d\x10\x68\x63\x63\x2b\x3d\x5f\x37\xb4\xdf\xf6\x14\xd9\x4a\xa3\xed\x99\x86\xda\x87\xe3\x3c\x90\x94\xc1\xc2\xa0\xa5\x7c\x19\x48\x14\x03\x70\xd6\x69\x83\x55\x7d\xdb\x4c\xc7\xc2\x02\x41\xb2\x60\x92\x82\xdb\x69\xf8\xfb\xef\x97\xb7\xd7\x6f\xa6\x37\x97\x6f\xfe\x5d\xc9\x5f\x5d\xbf\x80\x44\xe7\x39\x59\xea\xcf\xd2\x88\xc8\x78\x53\x74\x42\x39\xda\x4e\xca\x3b\xaf\x5e\x5e\xff\xf4\xe7\x10\x03\xee\x8a\xe7\x52\x66\x53\xe0\xc6\xab\x47\xe8\x6d\xe8\xf7\x87\x8b\xc4\xfb\x70\x15\x68\x72\x61\x6d\xf0\xc0\x40\xed\x54\xed\x58\xed\xe7\x59\xc0\xa7\x06\x70\x8d\xeb\x0e\x28\x09\x8d\x2f\x08\xca\x76\x10\x6c\x40\x73\x07\x61\xc0\x43\x49\x03\xf6\x88\x89\x20\x23\x94\x43\x29\xc5\xbb\x69\x40\x3f\xb2\xc1\x46\xe9\x1d\x7c\xd8\x10\xeb\x72\x56\x2c\x52\x5f\xc4\xc9\x7e\x81\xf5\x64\x54\xab\x1a\xc5\xf2\x9a\xc2\xac\xbd\xd7\x86\x57\x2b\xbc\x24\x63\x6a\x4e\x0b\xc1\x5f\xb5\x75\x24\x9b\x7a\x19\x78\xec\x47\xe6\xd8\xcf\x46\x14\xa1\x17\x0d\x47\x0b\xb8\x9a\xc7\xea\x89\x6e\xa5\x13\x39\x73\x38\x6c\x71\xd8\x46\xe2\x0f\xb3\x4e\x29\xf9\x50\x1b\x95\xdd\x76\xd4\xa5\x6b\x58\xcb\x07\x9d\x7a\x2f\xf8\x16\x3d\x4a\xd1\x08\xf1\x94\xaa\xaa\x0d\x45\x74\x75\xf5\x08\xb5\x31\xd2\x1e\x6e\xb4\x6d\xce\xed\x7d\xb6\x10\xaf\xd3\x6d\x87\xa9\x93\x55\xb5\x94\x2f\xeb\x45\x61\xc1\xad\x0a\x91\x84\x1a\x8b\xfe\xc5\xe8\x11\xaf\xa3\xf8\x38\xac\x7d\xc6\xcb\x5c\x6e\x76\x82\x52\x93\x3d\x08\xa0\x21\xbd\x9d\x0a\xd6\xd7\x00\x29\x74\x30\x5b\x9b\xf4\x10\xb0\xd6\xce\x7e\xfb\xe2\xc7\x7a\x2b\xa4\x1a\x17\x56\xda\xc3\x3d\x8b\x0c\xea\x0b\x4e\xc1\x00\x7f\x68\x0f\x09\x53\x90\x0a\xc5\xe3\x8e\xcc\x6c\x15\xea\x4e\xa1\x9a\x59\xae\x87\x60\x84\xfe\x2f\x82\x71\x63\xdb\xa6\x96\xe1\xfb\x1b\xcc\xb1\x66\x42\xe3\x55\xbb\x2a\x7c\x3a\x42\x8c\xf4\x66\xab\x72\x2c\xd8\x8b\x25\x09\x95\xf7\xcd\x45\x7a\x97\xd5\x8c\x57\xed\x12\xaf\xb7\x4a\x6f\x3e\xd7\x17\xc4\x6f\x8d\x62\x73\xba\x60\x46\x50\xce\xdc\x4e\x73\x7d\x63\x4d\x53\x2d\x39\x9a\x4d\x55\x65\xa3\x6f\x1d\x7a\x99\xb6\xee\xa9\xb9\x71\x87\xa2\x0f\x0d\xfc\x4b\xe0\xc2\x60\xe2\xb4\x59\x91\x2b\x38\x16\x23\x97\x49\xb9\xcd\x4d\xca\xac\x1a\x23\x9d\xd2\xea\x6d\xb9\x34\xa5\x08\x77\x71\xc7\x76\x2c\x38\xb2\x89\xf1\xea\xaa\xed\x61\xf0\xaa\x3f\x1c\x2d\x4f\x15\xc6\xcd\xa6\x19\x82\xcd\x98\x41\x0e\x33\x4c\xa9\x3a\x9e\x61\xa2\x73\x52\x6a\x21\xac\x98\xc9\xb2\x5c\x16\xb4\x0e\xa1\xe7\x3e\x4a\x36\x1e\x74\xc0\x43\x48\xb9\x31\x10\x54\x03\x55\x45\x6b\xcf\x2e\xe0\xc3\xbe\x60\xdc\x0c\x6c\x91\x77\xa2\x95\xc2\xb0\xc0\x3f\x46\xb4\xda\x01\x74\x08\x4c\x55\xf5\xd7\x2a\xfe\xea\x1c\x76\xfb\xea\x3a\x6e\x04\x69\x25\x57\x61\x63\x33\xe4\x2f\x0e\x22\x6e\xec\xd3\xb4\xb4\x10\x26\xb9\x12\xdb\x41\xdc\x73\xe6\x92\x8c\x68\x36\xbc\x7b\x08\x00\x9d\x68\x12\x7b\xef\xd1\x08\xed\xed\x0f\x9f\xa5\x9e\xdf\x33\x7d\x85\x45\x5d\xe0\x16\x06\xbf\x95\x0a\xc2\x0f\xf0\xfa\xb7\x6b\xe1\xd6\xbe\x7e\x22\x29\x6c\x6d\x01\xfb\x5e\x8a\x6a\x53\xf4\x01\x25\xe0\x13\xe7\xa1\x61\xfd\x1e\x1a\xbb\x37\x65\x81\x4e\x21\xd7\xb1\x23\xd9\x39\x32\x59\xc3\xd6\xc1\x05\x2c\x08\x67\x83\xdc\x8e\xea\xfd\xaa\x66\x3d\x3b\x8e\x5a\x1e\x65\xb2\x78\x7c\xe9\xee\x95\x78\xef\x11\x44\x08\x95\x54\x94\x5b\xb7\x04\x6a\x8d\x5d\x0d\x6b\xa3\x7c\xbf\x62\x8a\xd8\x30\xd5\x5e\x71\xaa\xdc\xa5\xd6\x77\x94\x68\x4b\x0e\xdc\x3b\xb0\x9e\x16\xbb\x27\xa6\x3a\x8b\xef\x3d\xca\x69\x61\xf4\x31\x71\x1d\xd9\xef\x75\xd0\x0c\x6e\x8c\x86\x42\x0a\xeb\x4e\xa5\x3a\x6f\x20\x1e\x9e\xeb\xd8\xa8\x6d\x58\xbf\xc7\x50\x5b\x18\x66\x4d\x68\x0d\xc3\x3e\x8c\xd0\x9e\xb3\x85\x36\xc2\xa1\x1d\x87\x11\xbf\x36\x32\x6b\xe0\x76\x00\x9d\x05\xc8\x4e\x9b\xc4\x58\x82\x47\x4a\x62\x97\x09\x9e\x24\x89\x11\xe2\xc7\x4c\x62\x1d\xfd\x3e\x3d\x89\x91\x61\xbf\x91\xd8\xc3\x49\x8c\x70\xfb\x46\x62\x2d\x3d\x0a\x6d\x9d\x48\x8e\xaa\x0c\x6b\x2e\x39\x6f\xa2\x7a\x27\xba\xde\xac\xc0\x3f\xce\xd5\xe6\x90\x76\x4f\xb2\xd6\xac\x8c\x7c\xe8\x42\x73\x4d\x6e\x7c\xf6\xb5\x31\x5b\x85\xdd\xb7\xa5\xe6\xa6\x2a\x2d\x43\x29\xf7\xa5\xb7\x61\xde\x62\xe5\xb7\x6d\x61\x9f\x7c\x8e\x0a\x4d\xb5\xdf\xce\x20\x0c\x0f\xb1\x57\xfc\x44\xa2\xdc\xd1\xb7\x80\xcb\x42\x97\x5f\x32\x0f\xed\x6c\xda\xe6\xde\x3f\xd9\x43\xe1\x7d\x93\x07\xb7\x70\xdc\x9e\x2c\xfc\x25\x51\x61\xb5\x99\xbc\xe7\xab\xa3\x6a\xbb\x79\x4f\x71\xb2\xdf\xe7\x78\x89\x5e\xcf\x73\xf8\x8b\xf3\x0c\xdb\x3e\x65\x33\xed\x25\x6f\x7b\x9e\xd3\x47\xb9\xa7\xd6\xb7\xe1\x21\x30\x84\x57\x0a\xe5\xd7\xff\x83\x6f\x04\x42\x94\x95\xb0\x94\x21\x14\x84\xab\xe9\x8f\x11\x9a\xbe\xbf\x7e\x56\x68\xaa\xe9\x4f\x93\xe2\xdf\x59\xad\x1e\xcb\xf0\xbf\xbc\x7e\xf9\x9f\x61\x9a\x6f\xb0\xf4\x86\xef\x9d\xbe\x2e\xa6\x5e\x17\x21\xa7\xc4\xb9\x6b\xfb\x7f\x41\x84\xdb\x30\xc5\xe3\xe8\x44\xd8\xc6\x07\xc9\xc1\xb9\xe3\x9f\x01\x9e\x82\x89\xd6\xe1\x14\x46\xee\xdf\xaf\x45\x85\x8d\x20\x46\x07\x3d\xd1\x6a\xb2\x3e\x2e\x71\x18\xdd\x3c\x17\x52\xda\xce\x19\x9e\x78\x10\xc1\xe8\x85\xe0\xc8\x87\x0e\x7f\x10\xba\xad\x43\x16\x81\x7c\x8c\x50\xce\x96\x07\xe7\x2c\xd9\xca\xd1\x02\x8a\x6b\xef\xe2\xba\xe9\xaa\x31\x49\x34\x09\xad\xa2\x2c\x3a\xb2\x5f\xf8\x4e\x41\xc7\x5a\x15\x97\x2e\x8c\x48\xcb\xae\xb4\x3c\x25\x37\xbe\x6d\xbe\xdb\x1f\xdf\x94\x4c\xf7\x5d\xf8\xfe\x97\x2d\x98\x90\x94\x6e\xc6\x70\xab\xa4\xb8\xc3\x30\x5c\x3c\xbd\xd0\x80\xe5\xbc\xd6\xda\x86\x6e\xeb\x68\x62\x54\xe9\x22\x4b\x32\x70\xa2\x9c\xa2\x3c\x26\xc5\x1c\xf5\x09\xcf\x12\x3e\x6f\x2b\x0c\x2e\x84\xf6\x56\xae\x00\x97\xc2\x86\xef\x92\xef\x70\x15\xb6\x10\x72\xcd\x45\xba\x1a\x37\x11\x8b\x13\x71\x9d\x78\x4a\x8b\xc8\x21\x43\x83\x17\x50\x9d\xf9\x9b\x6b\xc9\xd4\x7c\xac\xcd\x7c\x52\xdc\xcd\x27\xf4\xe4\x93\xaa\xeb\xe4\x24\x38\x7c\xd3\x09\xae\xe6\xb5\x83\x27\xf6\x4c\x03\x00\xbb\x4f\x79\x35\xaf\xee\x19\xac\xe6\xb5\x95\xe4\x9e\x40\xdd\x47\x68\x7a\x50\x2e\xcb\xd9\xb2\x65\xc5\xef\x3f\x49\xde\xdb\x7d\x72\xab\x25\xbe\xe5\x4b\x5d\x0a\xdf\xed\x27\xb9\x52\x11\xb6\x5c\x84\x8a\xc7\x85\xf7\x5a\xa5\x56\x6a\xfe\x05\x79\x71\xeb\xc9\xbb\x6d\xa8\x5c\xee\x3c\x7c\xf7\xe9\x90\xf8\x1c\x59\x6c\xe0\x6e\xff\x5e\xf7\xce\x96\xb3\x77\x67\xdd\x5f\xf1\xff\x70\x1c\xfa\xec\xe3\xff\x03\x00\x00\xff\xff\x44\xdd\xa1\xb4\xe3\x3e\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 16099, mode: os.FileMode(0644), modTime: time.Unix(1621550826, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0xc1, 0x57, 0xea, 0x9c, 0xff, 0xf9, 0x33, 0x54, 0x41, 0xaf, 0xec, 0x36, 0x15, 0x67, 0x98, 0x10, 0xd8, 0x2, 0x99, 0xc0, 0xe2, 0xa, 0xeb, 0xf7, 0xe9, 0xc4, 0x6, 0xf2, 0xbc, 0xfa, 0x2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": {amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
