// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (15.93kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xf8\x0e\xb8\xdb\x43\x6a\x63\xf7\x31\x6f\x41\x76\xbb\xd7\x45\xf6\x9a\x6d\x9b\x05\x16\x87\x9e\x97\x16\x47\x16\x1b\x8a\x54\x49\xca\xb1\x51\xf4\xbb\x1f\x86\x94\x64\xea\x8f\xff\xc4\x69\xba\xae\x5b\x3d\x24\xb6\x38\x24\x47\xbf\x99\xf9\xcd\x90\x16\x3f\x9c\x01\x8c\xdc\xaa\xc0\xd1\x05\x8c\xf4\xec\x1d\x26\x6e\x74\x4e\xf7\x0c\xbe\x2f\x85\x41\x3e\xba\x80\xff\x9e\x01\x00\x8c\x58\xce\x14\x33\xd3\x44\xab\x54\xcc\x4b\xc3\x9c\xd0\x6a\x74\x06\xf0\xd6\xcb\x17\xcc\x39\x34\xea\xc6\xe8\x02\x8d\x13\x68\x47\x17\xf0\x21\x74\xfc\xdf\xf2\xd9\xf8\x5f\xcd\x57\x80\x11\x47\x9b\x18\x51\xf8\x01\x2e\x60\xb4\xee\x03\x85\xc1\x54\x2c\x91\xc3\xbd\x70\x19\x2c\x9f\xc1\xbd\x90\x12\x66\x08\x4c\x4a\x7d\x8f\x1c\x84\x02\x97\x21\x38\x5d\x80\xc4\x05\x4a\xd0\x29\xb8\x4c\x58\xb0\x49\x86\x39\x3b\x87\x59\xe9\x42\x27\xa5\x1d\x75\x2c\x2d\x72\xd0\x06\x92\x0c\x93\x3b\xe4\x63\x78\x43\xd2\x7e\x38\x0b\xa9\x36\xc0\x54\x92\x69\x63\xc1\x69\x12\x17\xca\xa2\x71\xc8\x7d\x13\xcd\x64\xb0\xb4\x48\xb3\x14\xcc\x38\x1b\xa6\x43\xf8\xe3\xf2\xd7\x6b\x48\x85\xc4\x6a\x3c\x1a\x52\x31\xa9\xe7\xba\xf4\x23\x31\xc5\x61\xc6\xfc\xd4\x0a\x7e\xd4\xc9\x1d\x1a\xb8\xd2\x79\xa1\x2d\xfe\xc3\xc2\x4f\x4b\x87\xca\x0a\xad\xe0\xb9\x40\xc9\x2d\xfc\x33\x73\xae\xb0\x17\x93\x09\xd7\x89\x1d\x73\x2f\x3f\x4e\x74\x3e\x49\x42\x9f\xfa\xff\x33\x9a\x72\xf2\x37\xac\xfb\x3f\x4b\x7d\xff\xef\xc6\x23\x0f\xed\xc7\x33\x80\x8f\xde\x1a\x8c\x73\x41\xf0\x32\xd9\x32\x48\xca\xa4\xc5\x60\xae\x01\x3b\x0d\x1a\x38\x32\x5b\xed\x26\xcc\x18\xb6\xf2\x5e\xe2\x6f\x0b\x87\xb9\x8d\xe4\x86\x1d\xaa\x6a\xd1\x0a\x5f\xa6\x8d\x4f\x85\xeb\x43\xf4\x79\xc8\xf3\xa2\xb6\x05\x2b\xa5\x9b\x32\xce\x0d\x5a\x1b\x8d\xdb\x6a\xee\x79\xe8\xfa\x7a\x1b\x7d\xfb\x78\x7e\x98\x0e\x89\x56\xd6\x31\xe5\xb6\x8c\xdc\x7c\x7e\x1b\x3d\xfa\x00\xe4\xdd\x11\x2f\xba\x7a\x74\x22\xe5\xd2\x5b\xc8\x7b\xdb\x4c\x52\x14\x80\x41\xc5\xd1\x40\x3d\x82\x3d\x87\xfb\x4c\x24\x19\x30\x83\x50\x08\x4c\xd0\xbb\xac\x50\xa9\x36\xb9\xc7\x03\x5c\xc6\x1c\x70\xed\xe3\x83\x63\x81\xca\xfb\xe8\xef\x84\x5c\x3b\x38\xaa\xc9\x42\x5c\xf8\x30\x72\x1a\x6a\x6c\x11\xa4\x4e\x98\x04\xeb\x98\x13\x09\x24\x06\x39\x2a\x27\x98\xb4\x14\xa2\xb5\xfb\x51\x0f\x3f\xf2\x33\x8e\x46\x2c\x7c\x38\xa0\x1d\x77\x0c\xb7\xd9\x5d\x60\x93\xcb\xf4\x4d\xb6\xcb\x6c\x61\x22\xcc\x0b\xc9\x1c\x4e\x0b\xe6\xb2\x51\x4f\xe2\x6d\xe7\xce\xc7\xae\x83\x3d\x62\xca\x3d\x66\x6b\xfb\x53\x07\x85\x5d\x11\x1d\x89\x6e\x74\xb4\xb6\x42\xfd\xb6\x01\x87\x6b\x3c\x0b\x7e\xd6\x50\x77\x05\xeb\x8c\x50\xf3\xe0\x4a\x35\x43\x07\x4f\x44\xde\xb5\x2e\xc4\x16\x0e\x1d\xbb\x58\xf4\x70\xee\x18\x6a\x3f\x4d\x49\xd4\x73\x6f\x4b\x55\x62\xcc\x4f\xa7\xe8\xd9\xa6\x6f\xad\x47\xe8\xd0\xd4\xae\xa8\x7e\x93\x21\x54\xb2\x41\x7f\x4a\x35\x22\x29\x25\x33\xb0\x08\x71\xe9\x83\xa8\x16\x42\x0b\xa5\x2d\x99\x94\x2b\xe0\x22\x4d\xd1\xf8\x64\x15\x3e\xa2\x72\x80\x6a\x21\x8c\x56\x39\x2a\x67\xc7\xf0\x5c\x1b\xc0\x25\xcb\x0b\x89\xe7\x70\x8f\x90\xb3\x15\x64\x6c\x81\x14\x8a\x61\xf8\x66\x72\x1a\xa6\x30\x9a\x97\x89\x0f\x5e\x4a\x62\x4c\x69\x97\x55\x33\x58\xc7\xe6\x42\xcd\x37\x86\x6f\x85\x59\xa7\x35\x30\x0f\xb5\x97\x46\x74\x1b\x73\xa1\xae\x51\xcd\xbd\x8d\xbf\xdf\x01\xe7\xa6\xbc\xd4\xd1\xa2\x9d\x9d\xaa\xc6\x7e\x8e\xea\xf4\x1a\xa4\x9e\x07\x85\xdd\x90\x4b\x4a\x61\x1d\xf1\x6f\x80\xd9\x68\x89\xd6\xa3\x4a\xae\x1a\x3e\xb5\x1e\x0a\xb4\xef\x1b\x0c\xa1\x4b\x57\x94\x8e\x1c\x82\x33\xc7\xc0\xea\xd2\x10\x9b\x53\x61\x44\x0c\xdb\x73\x92\xd8\xec\x7d\xd7\xde\xce\x53\xa3\x46\x8d\x99\xc4\x7e\x5e\x6d\x4c\xe0\xa3\x71\x63\x2b\x3d\x5f\x37\x62\xde\xf6\x14\xd9\xca\x4e\xed\x99\x86\xda\x87\xc3\xc7\xc7\xbe\xc1\xc2\xa0\xa5\x34\xe4\xb9\x09\x3d\x70\xd6\x69\x83\x75\xd9\x18\x67\x39\x61\x81\x20\x59\x30\x49\x31\xe3\x34\xfc\xfd\xf7\xcb\xdb\xeb\x37\xd3\x9b\xcb\x37\xff\xae\xe5\xaf\xae\x5f\x40\xa2\xf3\x9c\x2c\xf5\x67\x65\x44\x64\x3c\x16\x9d\x50\xea\xb3\x93\xea\xce\xab\x97\xd7\x3f\xfd\x39\x44\x2c\xbb\xc2\xa4\x92\xd9\x14\x0f\xe1\xea\xf1\x64\x1b\xfa\xfd\xe1\x22\xf1\x3e\x5c\x05\x9a\x5c\x58\xeb\x3d\xd0\x33\x26\x15\x11\x56\x97\xf3\xcc\xe3\xd3\x00\xb8\xc6\x75\x07\x94\x84\xc6\x17\x04\x65\x3b\x08\x36\xa0\xb9\x83\x30\xe0\xa1\xa4\x01\x7b\xc4\x84\x97\x11\xca\xa1\x94\xe2\xdd\xd4\xa3\x1f\xd8\x60\xa3\xf4\x0e\x3e\x8c\xc4\xba\x9c\x15\x6a\xbf\x17\x61\xb2\x5f\x60\x3d\x19\x95\x80\x46\xb1\xbc\xa1\x30\x6b\xef\xb5\xe1\xf5\xc2\x29\xc9\x98\x9a\xd3\xfa\xea\x57\x6d\x1d\xc9\xa6\xa5\xf4\x3c\xf6\x23\x73\xec\x67\x23\x0a\xdf\x8b\x86\xa3\x75\x51\xc3\x63\xcd\x44\xb7\xd2\x89\x9c\x39\x1c\xb6\x38\x6c\x23\xf1\x87\x59\xa7\x92\x7c\xa8\x8d\xaa\x6e\x3b\xca\xbd\x35\xac\xd5\x83\x4e\xcb\x52\xf0\x2d\x7a\x54\xa2\x01\xe2\x29\x15\x2b\x1b\x6a\xd3\xfa\xea\x11\x6a\x34\xd2\x1e\x6e\xb4\x6d\xce\xed\x7d\xb6\x10\xaf\xd3\x6d\x87\x69\x92\x55\xbd\x42\xae\xca\x30\x61\xc1\xad\x0a\x91\xf8\xd2\x85\xfe\x62\xf0\x88\xd7\x41\x7c\xec\x97\x14\xe3\x65\x2e\x37\x3b\x41\xa5\xc9\x1e\x04\x10\x49\x6f\xa7\x82\xf5\x35\x40\x0a\x1d\xcc\xd6\x26\x3d\x04\xac\xb5\xb3\xdf\xbe\xf8\xb1\xd9\x61\xa8\xc7\x85\x95\x2e\xe1\x9e\x05\x06\x2d\x0b\x4e\xc1\x00\x7f\xe8\x12\x12\xa6\x20\x15\x8a\x87\x8d\x8e\xd9\xca\x97\x73\x42\xc5\x59\xae\x87\x60\x80\xfe\x2f\x82\x71\x63\xdb\xa6\x96\xe1\xfb\x1b\xcc\xb1\x66\x42\x53\xaa\x76\x55\xf8\x74\x84\x18\xe8\xcd\xd6\xe5\x98\xb7\x17\x4b\x12\xaa\x9a\xe3\xb5\x6f\x97\xd5\x4c\xa9\xda\x25\x5e\x6f\xf1\x1b\x3f\xd7\x17\xc4\x6f\x51\xb1\x39\x5d\x30\x23\x28\x67\x6e\xa7\xb9\xbe\xb1\xa6\xa9\x96\x1c\xcd\xa6\xaa\x32\xea\xdb\x84\x5e\xa6\xad\x7b\x6a\x6e\xdc\xa1\xe8\x43\x03\xff\x12\xb8\x30\x98\x38\x6d\x56\xe4\x0a\x8e\x85\xc8\x65\x52\x6e\x73\x93\x2a\xab\x86\x48\xa7\xb4\x7a\x5b\xad\xf8\x28\xc2\x5d\xd8\x08\x1d\x0b\x8e\x6c\x62\x4a\x75\xd5\xf6\x30\x78\xd5\x1f\x8e\x56\x7d\x0a\xc3\x1e\xce\x0c\xc1\x66\xcc\x20\x87\x19\xa6\x54\x1d\xcf\x30\xd1\x39\x29\xb5\x10\x56\xcc\x64\x55\x2e\x0b\x5a\x87\xd0\x73\x1f\x25\x1b\x0f\x3a\xe0\x21\xa4\x1c\x0d\x04\xf5\x40\x75\xd1\xda\xb3\x0b\x94\x7e\xbb\x2d\xec\xb1\xb5\xc8\x3b\xd1\x4a\xa1\x5f\x37\x1f\x23\x5a\xed\x00\x3a\x04\xa6\xba\xfa\x6b\x15\x7f\x4d\x0e\xbb\x7d\x75\x1d\xf6\x57\xb4\x92\x2b\xbf\x5f\xe8\xf3\x17\x07\x11\xf6\xcb\x69\x5a\x5a\x08\x93\x5c\x85\xed\x20\xee\x39\x73\x49\x46\x34\xeb\xb7\xf4\x3d\x40\x27\x9a\xc4\xde\x97\x68\x84\x2e\xed\x0f\x9f\xa5\x9e\xdf\x33\x7d\xf9\x45\x9d\xe7\x16\x06\xbf\x55\x0a\xc2\x0f\xf0\xfa\xb7\x6b\xe1\xd6\xbe\x7e\x22\x29\x6c\x6d\x01\xfb\x5e\x8a\x7a\xaf\xf1\x01\x25\xe0\x13\xe7\xa1\x61\xfd\x1e\x1a\xbb\x37\x55\x81\x4e\x21\xd7\xb1\x23\xd9\x39\x30\x59\x64\x6b\xef\x02\x16\x84\xb3\x5e\x6e\x47\xf5\x7e\xd5\xb0\x9e\x1d\x07\x2d\x8f\x32\x59\x3c\xbe\x74\x2f\x95\x78\x5f\x22\x08\x1f\x2a\xa9\xa8\x76\x44\x09\xd4\x06\xbb\x06\xd6\xa8\x7c\xbf\x62\x8a\xd8\x30\xd5\xa5\xe2\x54\xb9\x4b\xad\xef\x28\xd1\x56\x1c\xb8\x77\x60\x3d\x2d\x76\x4f\x4c\x75\x16\xdf\x97\x28\xa7\x85\xd1\xc7\xc4\x75\x64\xbf\xd7\x5e\x33\xb8\x31\x1a\x0a\x29\xac\x3b\x95\xea\x3c\x42\xdc\x3f\xd7\xb1\x51\xdb\xb0\x7e\x8f\xa1\x36\x3f\xcc\x9a\xd0\x22\xc3\x3e\x8c\xd0\x9e\xb3\x85\x36\xc2\xa1\x1d\xfb\x11\xbf\x36\x32\x8b\x70\x3b\x80\xce\x3c\x64\xa7\x4d\x62\x2c\xc1\x23\x25\xb1\xcb\x04\x4f\x92\xc4\x08\xf1\x63\x26\xb1\x8e\x7e\x9f\x9e\xc4\xc8\xb0\xdf\x48\xec\xe1\x24\x46\xb8\x7d\x23\xb1\x96\x1e\x85\xb6\x4e\x24\x47\x55\x86\xc5\x4b\xce\x9b\xa0\xde\x89\xae\x37\x6b\xf0\x8f\x73\xb5\x39\xa4\xdd\x93\xac\x35\x6b\x23\x1f\xba\xd0\x5c\x93\x1b\x9f\x7d\x6d\xcc\x56\x63\xf7\x6d\xa9\xb9\xa9\x4a\xcb\x50\xca\x7d\xe9\x6d\x98\xb7\x58\xf5\xca\x98\xdf\x27\x9f\xa3\x42\x53\xef\xb7\x33\xf0\xc3\x43\xe8\x15\x5e\x91\xa8\x76\xf4\x2d\xe0\xb2\xd0\xd5\x0b\xc2\x43\x3b\x9b\x36\xde\xfb\x27\x7b\x28\xbc\x8f\x79\x70\x0b\xc7\xed\xc9\xc2\x5f\x12\x15\xd6\x9b\xc9\x7b\xfe\x74\x54\x6f\x37\xef\x29\x4e\xf6\xfb\x1c\x3f\xa2\x37\xf3\x1c\xfe\xc3\x79\x86\x6d\x9f\xb2\x99\x2e\x25\x6f\x7b\x9e\xd3\x47\xb9\xa7\xd6\xb7\xe1\x21\x30\xf8\x9f\x14\xaa\x97\xea\x07\x7f\x11\xf0\x51\x56\xc1\x52\x85\x90\x17\xae\xa7\x3f\x46\x68\xfa\xfe\xfa\x59\xa1\xa9\xa7\x3f\x4d\x8a\x7f\x67\xb5\x7a\x2c\xc3\xff\xf2\xfa\xe5\x7f\x86\x69\x3e\x62\xe9\x0d\xef\x3b\x7d\x5d\x4c\xbd\x2e\x42\x4e\x89\x73\xd7\xf6\xff\x82\x08\x37\x32\xc5\xe3\xe8\x44\xd8\xe8\x85\x64\xef\xdc\xe1\xab\x87\xa7\x60\xa2\x75\xe6\x83\x91\xfb\xf7\x6b\x51\x61\x03\x88\xc1\x41\x4f\xb4\x9a\x6c\x4e\x21\x1c\x46\x37\xcf\x85\x94\xb6\x73\x34\x26\xbc\xdf\x6f\xf4\x42\x70\xe4\x43\x67\x2a\x08\xdd\xd6\xd9\x05\x4f\x3e\x46\x28\x67\xab\xf3\x68\x96\x6c\xe5\x68\x01\xc5\x75\xe9\xc2\xba\xe9\x2a\x9a\x24\x98\x84\x56\x51\x16\x1d\xd9\xcf\xbf\xa7\xa0\x43\xad\x8a\x4b\xe7\x47\xa4\x65\x57\x5a\x1d\x3e\x1b\xdf\xc6\xbf\xed\x8f\x6f\x2a\xa6\xfb\xce\xbf\xff\xcb\x16\x4c\x48\x4a\x37\x63\xb8\x55\x52\xdc\xa1\x1f\x2e\x1c\x0a\x88\x60\x39\x6f\xb4\xb6\xbe\xdb\x3a\x9a\x18\x55\xba\xc8\x92\x0c\x9c\xa8\xa6\xa8\x4e\x1f\x31\x47\x7d\xfc\xb3\xf8\xd7\xdb\x0a\x83\x0b\xa1\x4b\x2b\x57\x80\x4b\x61\xfd\x7b\xc9\x77\xb8\xf2\x5b\x08\xb9\xe6\x22\x5d\x8d\x63\xc4\xc2\x44\x5c\x27\x25\xa5\x45\xe4\x90\xa1\xc1\x0b\xa8\x8f\xd2\xcd\xb5\x64\x6a\x3e\xd6\x66\x3e\x29\xee\xe6\x13\x7a\xf2\x49\xdd\x75\x72\x12\x1c\xbe\xe9\x60\x54\x7c\xed\xe0\x89\x3d\xd3\x00\xc0\xee\xc3\x53\xf1\xd5\x3d\xda\x14\x5f\x5b\x49\xee\x09\xd4\x7d\x84\xa6\x07\xe5\xb2\x9c\x2d\x5b\x56\xfc\xfe\x93\xe4\xbd\xdd\x07\xa2\x5a\xe2\x5b\xde\xd4\xa5\xf0\xdd\x7e\x40\x2a\x15\x7e\xcb\x45\xa8\x70\x0a\x77\xaf\x55\x6a\xad\xe6\x5f\x90\x17\xb7\x1e\x68\xdb\x86\xca\xe5\xce\x33\x6d\x9f\x0e\x89\xcf\x91\xc5\x06\xee\xf6\xef\x75\xef\x6c\x39\xd2\x76\xd6\xfd\x14\xfe\xfb\x53\xc6\x67\x1f\xff\x1f\x00\x00\xff\xff\x77\xe3\x8e\x7d\x3a\x3e\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 15930, mode: os.FileMode(0644), modTime: time.Unix(1612385158, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x1e, 0xf1, 0xfb, 0xd, 0x74, 0x3e, 0x62, 0x47, 0xc3, 0xc6, 0xd1, 0x28, 0x19, 0x7c, 0x76, 0x17, 0x94, 0xc5, 0x29, 0x2d, 0x74, 0xee, 0xb0, 0x6, 0xb3, 0x81, 0x40, 0x3e, 0x64, 0x5a, 0x2f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": {amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
