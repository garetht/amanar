// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (16.471kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x73\xdb\x36\x12\x7f\xf7\xa7\xd8\xd1\xdd\xcc\x5d\x6f\x1c\x69\xda\x47\xbf\xf9\x9c\xa6\x97\x8e\xd3\xb8\x49\xdc\x9b\xce\x4d\x4e\x85\x88\xa5\x88\x18\x04\x18\xfc\x91\xad\xc9\xe4\xbb\x77\x16\x20\x29\xfe\x95\x64\x3b\x4e\x15\x27\x7c\xb0\x25\x72\x01\x2c\x7f\xbb\xfb\xdb\x05\x04\x7c\x38\x02\x98\xb8\x75\x81\x93\x13\x98\xe8\xc5\x3b\x4c\xdc\xe4\x98\xee\x19\x7c\xef\x85\x41\x3e\x39\x81\xff\x1d\x01\x00\x4c\x58\xce\x14\x33\xf3\x44\xab\x54\x2c\xbd\x61\x4e\x68\x35\x39\x02\x78\x1b\xe4\x0b\xe6\x1c\x1a\x75\x61\x74\x81\xc6\x09\xb4\x93\x13\xf8\x10\x1b\xfe\xff\xe6\xc9\xf4\x5f\xf5\x57\x80\x09\x47\x9b\x18\x51\x84\x0e\x4e\x60\xb2\x69\x03\x85\xc1\x54\xdc\x20\x87\x6b\xe1\x32\xb8\x79\x02\xd7\x42\x4a\x58\x20\x30\x29\xf5\x35\x72\x10\x0a\x5c\x86\xe0\x74\x01\x12\x57\x28\x41\xa7\xe0\x32\x61\xc1\x26\x19\xe6\xec\x18\x16\xde\xc5\x46\x4a\x3b\x6a\xe8\x2d\x72\xd0\x06\x92\x0c\x93\x2b\xe4\x53\x78\x43\xd2\xa1\x3b\x0b\xa9\x36\xc0\x54\x92\x69\x63\xc1\x69\x12\x17\xca\xa2\x71\xc8\xc3\x23\x1a\xc9\xa0\xb7\x48\xa3\x14\xcc\x38\x1b\x87\x43\xf8\xfd\xf4\xc5\x39\xa4\x42\x62\xd9\x1f\x75\xa9\x98\xd4\x4b\xed\x43\x4f\x4c\x71\x58\xb0\x30\xb4\x82\xa7\x3a\xb9\x42\x03\x67\x3a\x2f\xb4\xc5\x7f\x58\xf8\xf1\xc6\xa1\xb2\x42\x2b\x78\x26\x50\x72\x0b\xff\xcc\x9c\x2b\xec\xc9\x6c\xc6\x75\x62\xa7\x3c\xc8\x4f\x13\x9d\xcf\x92\xd8\xa6\xfa\xff\x84\x86\x9c\xfd\x0d\xab\xf6\x4f\xd2\xd0\xfe\xbb\xe9\x24\x40\xfb\xf1\x08\xe0\x63\xb0\x06\xe3\x5c\x10\xbc\x4c\xb6\x0c\x92\x32\x69\x31\x9a\x6b\xc0\x4e\x83\x06\x6e\x98\xad\x72\x13\x66\x0c\x5b\x07\x2f\x09\xb7\x85\xc3\xdc\x36\xe4\x86\x1d\xaa\x7c\xa2\x15\xbe\x4c\x6b\x9f\x8a\xd7\x87\xc6\xe7\x21\xcf\x6b\x3c\x5b\x31\x2f\xdd\x9c\x71\x6e\xd0\xda\x46\xbf\xad\xc7\x3d\x0f\xdd\x5c\x6f\x1b\xdf\x3e\x1e\xdf\x4d\x87\x44\x2b\xeb\x98\x72\x5b\x7a\xae\x3f\xbf\x6d\xbc\xfa\x00\xe4\xdd\x1e\x4f\xba\x7a\x74\x22\xe5\x34\x58\x28\x78\xdb\x42\x52\x14\x80\x41\xc5\xd1\x40\xd5\x83\x3d\x86\xeb\x4c\x24\x19\x30\x83\x50\x08\x4c\x30\xb8\xac\x50\xa9\x36\x79\xc0\x03\x5c\xc6\x1c\x70\x1d\xe2\x83\x63\x81\x2a\xf8\xe8\x6f\x84\x5c\x3b\x38\xca\xc1\x62\x5c\x84\x30\x72\x1a\x2a\x6c\x11\xa4\x4e\x98\x04\xeb\x98\x13\x09\x24\x06\x39\x2a\x27\x98\xb4\x14\xa2\x95\xfb\x51\x8b\xd0\xf3\x13\x8e\x46\xac\x42\x38\xa0\x9d\x76\x0c\x37\xee\x2e\x30\xe6\x32\x7d\x93\xed\x32\x5b\x1c\x08\xf3\x42\x32\x87\xf3\x82\xb9\x6c\xd2\x93\x78\xdb\xb9\xf3\xb1\xeb\x60\xf7\x18\x72\x8f\xd1\xda\xfe\xd4\x41\x61\x57\x44\x37\x44\x47\x1d\xad\xad\x50\xff\xd9\x80\xc3\xd5\x9e\x05\x3f\x69\xa8\x9a\x82\x75\x46\xa8\x65\x74\xa5\x8a\xa1\xa3\x27\x22\xef\x5a\x17\x9a\x16\x8e\x0d\xbb\x58\xf4\x70\xee\x18\x6a\x3f\x4d\x49\x34\x70\x6f\x4b\x55\x62\xcc\x4f\xa7\xe8\xd1\xd8\xb7\xd6\x2b\x74\x68\x6a\x57\x54\xbf\xc9\x10\x4a\xd9\xa8\x3f\xa5\x1a\x91\x78\xc9\x0c\xac\x62\x5c\x86\x20\xaa\x84\xd0\x82\xb7\x9e\x49\xb9\x06\x2e\xd2\x14\x4d\x48\x56\xf1\x23\x2a\x07\xa8\x56\xc2\x68\x95\xa3\x72\x76\x0a\xcf\xb4\x01\xbc\x61\x79\x21\xf1\x18\xae\x11\x72\xb6\x86\x8c\xad\x90\x42\x31\x76\x5f\x0f\x4e\xdd\x14\x46\x73\x9f\x84\xe0\xa5\x24\xc6\x94\x76\x59\x39\x82\x75\x6c\x29\xd4\x72\x34\x7c\x4b\xcc\x3a\x4f\x23\xf3\xd0\x73\x6f\x44\xf7\x61\x2e\xd4\x39\xaa\x65\xb0\xf1\xf7\xbb\xe0\xf4\x03\xae\x30\x41\xe5\x73\x8a\xbd\x89\xd3\x57\xa8\x26\xc7\x30\x59\x0a\x97\xf9\x05\x7d\x62\xd7\x76\x2e\x58\x3e\xe9\xc6\x52\x07\xff\x12\x5c\xef\x32\xc8\xd1\x65\xba\xe7\x19\x5b\xbc\x62\x48\x51\xbe\x98\x7b\x8b\x46\xb1\x1c\xe7\xb1\xa0\xd9\xc3\x05\x84\xad\x1d\x34\x70\x2d\xb3\xa1\xd0\x78\x2a\x6c\x21\xd9\xfa\x17\x96\x63\x55\x7b\x44\x75\xc3\xeb\x1e\xd3\x0d\x05\xa9\x37\xc1\x48\x55\xdb\xb2\x48\x5a\xa2\xc2\x98\x04\xab\xa6\x14\x15\xda\x30\xb3\x86\xa7\xff\x86\x4a\xc7\x46\x16\xc8\xf4\x35\xac\xb5\x07\x8e\xa9\x50\x44\xf8\x19\xd6\x62\xf3\x2a\xa4\xa6\x70\xe6\x0d\x39\x9a\x5c\x1f\xc7\xda\x4b\x58\xd0\x4a\xae\xc1\xfa\xa2\xd0\xa1\x7a\x5a\xac\xe1\xf4\xbf\xaf\xe1\xf9\xe9\x8b\xdb\xe0\x7a\x0f\xe7\x18\x2b\x5a\x3a\x03\xb5\x4b\x97\xf2\x61\xbf\x80\xe9\xb4\x1a\xcc\x4b\xb7\xe2\xe4\x21\xbe\x92\xc2\x3a\x32\x4c\x8c\x41\xa3\x25\xda\x10\x72\xc4\x63\xf1\x53\xeb\xa5\x40\x87\xb6\x31\x4a\xb5\x77\x85\x27\x27\x00\xce\x1c\x03\xab\xbd\xa1\x54\x4f\x55\x33\xa5\xdf\x1e\x83\x34\x39\xa1\xcf\x7b\xdb\x93\xd8\xa4\x56\x63\x21\xb1\x5f\x74\xd5\x26\x08\x54\x3d\xfa\x94\xde\xaf\x4b\xa7\x6f\x7b\x8a\x6c\x4d\x5d\xed\x91\x86\x9e\x0f\x73\x6b\x48\x0c\x06\x0b\x83\x96\x6a\x94\x90\xb8\x30\x00\x67\x9d\x36\x58\x85\x4b\xb3\x04\x12\x16\x08\x92\x15\x93\x44\xa8\x4e\xc3\xdf\x7f\x3b\xbd\x3c\x7f\x33\xbf\x38\x7d\xf3\x9f\x4a\xfe\xec\xfc\x39\x24\x3a\xcf\xc9\x52\x7f\x94\x46\x44\xc6\x9b\xa2\x33\xaa\x8b\xec\xac\xbc\xf3\xea\xe5\xf9\x8f\x7f\x0c\x65\x9d\x5d\x91\x50\xca\x8c\xc5\x43\xbc\x7a\x49\xb4\x0d\xfd\xfe\x70\x91\x78\x1f\xae\x02\x4d\x2e\xac\x0d\x1e\x18\xd2\x29\x55\x98\x56\xfb\x65\x16\xf0\xd9\x10\x53\x8d\xeb\x0e\x28\x09\x8d\x2f\x08\xca\x76\x10\x8c\xa0\xb9\x83\x30\xe0\xb6\xa4\x01\x7b\xc4\x44\x90\x11\xca\xa1\x94\xe2\xdd\x3c\xa0\x1f\xd9\x60\x54\x7a\x07\x1f\x36\xc4\xba\x9c\x15\x27\x06\xcf\xe3\x60\x3f\xc3\x66\xb0\x3a\x4b\x54\x14\x66\xed\xb5\x36\xbc\x9a\x55\x27\x19\x53\x4b\x9a\x7c\xbf\xd0\xd6\x91\x6c\xea\x65\xe0\xb1\xa7\xcc\xb1\x9f\x8c\x28\x42\x2b\xea\x8e\x26\xcd\x35\x8f\xd5\x03\x5d\x4a\x27\x72\x4a\x3d\xe3\xaa\x8e\x91\xf8\xed\xac\x53\x4a\xde\xd6\x46\x65\xb3\x1d\x73\x81\x0d\xac\xe5\x8b\xce\xbd\x17\x7c\x8b\x1e\xa5\x68\x84\x78\x4e\x95\xec\xc8\xc4\xa5\xba\x7a\x84\xda\xe8\x69\x0f\x37\xda\x36\xe6\xf6\x36\x5b\x88\xd7\xe9\xb6\xc3\xd4\xc9\xaa\x5a\x3e\x29\x6b\x74\x61\xc1\xad\x0b\x91\x84\xba\x96\xfe\x62\xf4\x88\xd7\x51\x7c\x1a\xe6\x9b\xd3\x9b\x5c\x8e\x3b\x41\xa9\xc9\x1e\x04\xd0\x90\xde\x4e\x05\x9b\x6b\x80\x14\x3a\x98\x6d\x4c\x7a\x17\xb0\x36\xce\x7e\xf9\xfc\x69\xbd\xfc\x54\xf5\x1b\xca\xb2\x6b\x16\x19\xd4\x17\x3c\xd4\x61\xbf\x6b\x0f\x09\x53\x90\x0a\xc5\x63\x25\xb6\x58\x87\x5a\x5f\xa8\x66\x96\xeb\x21\x18\xa1\xff\x8b\x60\x1c\x7d\x36\xf6\x64\xf8\xfe\x88\x39\x36\x4c\x68\xbc\x6a\x57\x85\x0f\x47\x88\x91\xde\x6c\x55\x8e\x05\x7b\xb1\x24\xa1\x29\x55\x73\x61\xa4\xcb\x6a\xc6\xab\x76\x89\xd7\x5b\x19\x69\xbe\xd7\x17\xc4\x6f\x8d\x62\x73\xbe\x62\x46\x50\xce\xdc\x4e\x73\x7d\x63\xcd\x53\x2d\x39\x9a\xb1\xaa\xb2\xd1\xb6\x0e\xbd\x4c\x5b\xf7\xd0\xdc\xb8\x43\xd1\xdb\x06\xfe\x29\x70\x61\x30\x71\xda\xac\xc9\x15\x1c\x8b\x91\xcb\xa4\xdc\xe6\x26\x65\x56\x8d\x91\x4e\x69\xf5\xb2\x5c\x0e\xa0\x08\x77\x71\x02\x38\x15\x1c\xd9\xcc\x78\x75\xd6\xf6\x30\x78\xd5\xef\x2e\x67\x6b\x50\x18\x17\xf8\x16\x08\x36\x63\x86\xe6\x70\x98\x52\x75\xbc\xc0\x44\xe7\xa4\xd4\x4a\x58\xb1\x90\x65\xb9\x2c\x68\x1e\x42\xef\x7d\x90\x6c\x3c\xe8\x80\x77\x21\xe5\x46\x47\x50\x75\x54\x15\xad\x3d\xbb\x80\x0f\x6b\xb1\x71\x01\xb6\x45\xde\x89\x56\x0a\xc3\xa2\xca\x21\xa2\xd5\x0e\xa0\xbb\xc0\x54\x2f\x25\x34\x8b\xbf\x3a\x87\x5d\xbe\x3a\x8f\x6b\x1b\x61\x91\x60\x81\x65\xfe\xe2\x20\xe2\xaa\x04\x0d\x4b\x13\x61\x92\x2b\xb1\x1d\xc4\x3d\x67\x2e\xc9\x88\x66\xc3\xef\x3d\x01\xa0\x47\x9a\xc4\xde\x7b\x34\x42\x7b\xfb\xc3\x67\xa9\xe7\xf7\x4c\x5f\x61\x52\x17\xb8\x85\xc1\xaf\xa5\x82\xf0\x03\xbc\xfe\xf5\x5c\xb8\x8d\xaf\x3f\x92\x14\xb6\xb1\x80\x7d\x2f\x45\xb5\x10\x7d\x8b\x12\xf0\x81\xf3\xd0\xb0\x7e\xb7\x8d\xdd\x8b\xb2\x40\xa7\x90\xeb\xd8\x91\xec\x1c\x99\xac\x61\xeb\xe0\x02\x16\x84\xb3\x41\x6e\x47\xf5\x7e\x56\xb3\x9e\x9d\x46\x2d\x0f\x32\x59\xdc\xbf\x74\xf7\x4a\xbc\xf7\x08\x22\x84\x4a\x2a\xca\xe5\x72\x02\xb5\xc6\xae\x86\xb5\x51\xbe\x9f\x31\x45\x6c\x98\x6a\xaf\xc2\x8a\xa9\xd4\xfa\x8a\x12\x6d\xc9\x81\x7b\x07\xd6\xc3\x62\xf7\xc0\x54\x67\xf1\xbd\x47\x39\x2f\x8c\x3e\x24\xae\x23\xfb\xbd\x0e\x9a\xc1\x85\xd1\x50\x48\x61\xdd\x63\xa9\xce\x1b\x88\x87\xf7\x3a\x34\x6a\x1b\xd6\xef\x3e\xd4\x16\xba\xd9\x10\x5a\xc3\xb0\xb7\x23\xb4\x67\x6c\xa5\x8d\x70\x68\xa7\xa1\xc7\xaf\x8d\xcc\x1a\xb8\xdd\x81\xce\x02\x64\x8f\x9b\xc4\x58\x82\x07\x4a\x62\xa7\x09\x3e\x4a\x12\x23\xc4\x0f\x99\xc4\x3a\xfa\x7d\x7a\x12\x23\xc3\x7e\x23\xb1\xdb\x93\x18\xe1\xf6\x8d\xc4\x5a\x7a\x14\xda\x3a\x91\x1c\x54\x19\xd6\x9c\x72\x5e\x44\xf5\x1e\xe9\x7c\xb3\x02\xff\x30\x67\x9b\x43\xda\x3d\xc8\x5c\xb3\x32\xf2\x5d\x27\x9a\x1b\x72\xe3\x8b\xaf\x8d\xd9\x2a\xec\xbe\x4d\x35\xc7\xaa\xb4\x0c\xa5\xdc\x97\xde\x86\x79\x8b\x95\xfb\x09\xc3\x3a\x79\xb9\xbf\xaa\x22\xa8\xd0\x3d\xc4\x56\x71\x8b\x44\xb9\xa2\x6f\x01\x6f\x0a\x5d\xee\x1e\x1f\x5a\xd9\xb4\xcd\xb5\x7f\xb2\x87\xc2\xeb\x26\x0f\x6e\xe1\xb8\x3d\x59\xf8\x4b\xa2\xc2\x7a\xc3\xd9\x7e\x3f\x1d\x55\xcb\xcd\x7b\x8a\x93\xfd\x3e\xc7\x8f\xe8\xf5\x38\x77\xff\xe1\x3c\xc3\xb6\x4f\xd9\x4c\x7b\xc9\xdb\x9e\xe7\xf4\x41\xae\xa9\xf5\x6d\x78\x17\x18\x54\x63\xd7\xe3\xe0\x2f\x02\x21\xca\x4a\x58\xca\x10\x6a\xed\x59\x3c\x44\x68\xfa\xfe\xfa\x59\xa1\xa9\x86\x7f\x9c\x14\xff\xce\x6a\x75\x5f\x86\xff\xf9\xf5\xcb\x5f\x86\x69\xbe\xc1\xd2\x23\xfb\x9d\xbe\x2e\xa6\xde\x14\x21\x8f\x89\x73\x37\xf6\xff\x82\x08\xb7\x61\x8a\xfb\xd1\x89\xb0\x8d\x0d\xc9\xc1\xb9\xe3\xd7\x00\x4f\xc1\x44\xeb\x40\x10\x23\xf7\xef\xd7\xa2\xc2\x46\x10\xa3\x83\x3e\xd2\x6a\xb2\x3e\xa2\x72\x37\xba\x79\x26\xa4\xb4\x9d\x73\x53\xf1\xf0\x87\xd1\x2b\xc1\x91\x0f\x1d\xb8\x21\x74\x5b\x07\x5b\x02\xf9\x18\xa1\x9c\x2d\x0f\x2b\xda\x78\x36\x00\xac\xe3\xda\xbb\x38\x6f\x3a\x6b\x0c\x12\x4d\x42\xb3\x28\x8b\xae\x3a\x64\xc0\x75\xac\x55\xf1\xc6\x85\x1e\x69\xda\x95\x96\x27\x13\xa7\x97\xcd\xdf\xf6\xa7\x17\x25\xd3\x7d\x17\xf6\xff\xb2\x15\x13\x92\xd2\xcd\x14\x2e\x95\x14\x57\x18\xba\x8b\x27\x46\x1a\xb0\x1c\xd7\x5a\xdb\xd0\x6c\x13\x4d\x8c\x2a\x5d\x64\x49\x06\x4e\x94\x43\x94\x47\xd3\x98\xa3\x36\xe1\x5d\xc2\xf6\xb6\xc2\xe0\x4a\x68\x6f\xe5\x1a\xf0\x46\xd8\xb0\x2f\xf9\x0a\xd7\x61\x09\x21\xd7\x5c\xa4\xeb\x69\x13\xb1\x38\x10\xd7\x89\xa7\xb4\x88\x1c\x32\x34\x78\x02\xd5\x39\xcb\xa5\x96\x4c\x2d\xa7\xda\x2c\x67\xc5\xd5\x72\x46\x6f\x3e\xab\x9a\xce\x1e\x05\x87\x8f\x9d\x9a\x6b\x5e\x3b\x78\x62\xcf\x34\x00\xb0\xfb\x64\x5d\xf3\xea\x9e\x7b\x6b\x5e\x5b\x49\xee\x01\xd4\xbd\x87\xa6\x77\xca\x65\x39\xbb\x69\x59\xf1\xfb\x4f\x92\xf7\x76\x9f\x96\x6b\x89\x6f\xd9\xa9\x4b\xe1\xbb\xfd\xf4\x5c\x2a\xc2\x92\x8b\x50\xf1\x88\xf6\x5e\xb3\xd4\x4a\xcd\xbf\x20\x2f\x6e\x3d\xed\xb8\x0d\x95\xd3\x9d\x07\x1e\x3f\x1d\x12\x9f\x23\x8b\x0d\xdc\xed\xdf\xeb\xde\xd9\x72\xde\xf1\xa8\xfb\x29\xfe\x0f\x47\xd0\x8f\x3e\xfe\x19\x00\x00\xff\xff\x06\xcd\x48\xfe\x57\x40\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 16471, mode: os.FileMode(0644), modTime: time.Unix(1622061233, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xe9, 0xa5, 0xe5, 0x82, 0x69, 0x6f, 0x50, 0xd2, 0xdd, 0x40, 0xb5, 0x68, 0x59, 0xd9, 0x13, 0xec, 0xdd, 0xa, 0xb, 0x43, 0x36, 0x40, 0x1d, 0x43, 0x3d, 0x80, 0x6e, 0xab, 0xd2, 0x8e, 0xd7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": {amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
