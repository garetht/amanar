// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (11.869kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5f\x6f\xdb\x38\x12\x7f\xef\xa7\x18\x08\xf7\x18\xd8\xd8\x7d\xcc\x5b\xd0\xbd\xee\x75\x91\xbb\x66\xdb\xa6\xc0\x61\x11\x78\x69\x71\x64\xb1\xa1\x48\x85\x7f\xec\x18\x87\x7c\xf7\xc3\x90\x94\x25\xc5\xf2\xdf\x6e\x72\x76\x2e\x0f\x89\x42\x8e\x86\xe4\x6f\x66\x7e\x33\x24\xf5\x9f\x77\x00\x99\x5b\xd6\x98\x5d\x42\xc6\x8c\x61\xcb\xec\x82\x9a\x84\xc3\xca\x66\x97\x40\xfd\x1d\x09\x3d\xfd\x8e\xb9\x0b\x22\x00\x19\xe3\x5c\x38\xa1\x15\x93\x37\x46\xd7\x68\x9c\x40\x7a\xa7\x60\xd2\x62\x12\x31\xf8\xe0\x85\x41\x9e\x5d\xc2\x1f\xd9\x9c\x79\xe9\x26\x8c\x73\x83\xd6\x66\x17\x90\x1a\x72\xad\x0a\x31\xf3\x86\x91\xae\xec\x2e\xbd\x59\x77\x55\xc6\x69\x00\x3c\x53\xd1\x76\x00\x64\x1c\x6d\x6e\x44\x1d\x94\x5c\x42\xf6\xb5\x44\x48\x72\xe0\x34\x30\xa8\x99\x71\x22\xf7\x92\x19\x08\x5a\x46\xf0\x8d\xfe\x34\x42\x68\xc1\x5b\xcf\xa4\x5c\x02\x17\x45\x81\x06\x0a\x6d\xd2\x23\x2a\x07\xa8\xe6\xc2\x68\x55\xa1\x72\x76\x04\x1f\xb4\x01\x7c\x64\x55\x2d\xf1\x02\x16\x08\x15\x5b\x42\xc9\xe6\x08\x5a\x61\x54\xbf\x1a\x9c\xd4\xd4\x46\x73\x9f\xd3\xd4\x80\x29\x0e\x4c\x69\x57\xa6\x11\xac\x63\x33\xa1\x66\xa3\x04\x6a\x0f\x6e\xeb\x8c\x50\xb3\x6e\x4f\xa1\x4d\xc5\x1c\xf5\x79\x23\xba\x1d\x95\x50\xd7\xa8\x66\xae\xcc\x2e\xe1\xa7\xd4\xfc\x74\xd1\x87\xad\x0f\x74\x0f\xbc\x75\x17\x48\x1d\x7d\x47\x78\x26\xdd\x73\x87\xd4\xb7\xdb\x29\x86\xed\x75\x05\x52\x58\x07\xba\x48\xf0\x19\x2d\xd1\x06\xb4\x6a\xe6\xca\xf8\xd4\x5b\x00\xe8\xf0\x6e\x04\x58\x7b\x57\x7b\x47\x86\xe6\xcc\x31\xb0\xda\x9b\x1c\x2d\x2c\x84\x2b\x85\x1a\x30\x7e\xd7\x9c\xa3\xfe\x02\xba\x2e\xdb\x69\x07\xc8\x56\xc3\x4f\x25\xda\xde\x4b\x2b\x88\x69\xae\xc3\x3d\xb4\x9e\xac\xd3\x71\xd7\x1b\x74\xd0\xdb\xd7\x35\x3f\xef\x1b\x76\x7b\x12\x05\x83\xb5\x41\x8b\xca\x09\x35\x03\x57\x62\x00\xc6\x3a\x6d\x10\x84\x0a\x0d\xdf\x62\x14\x7c\x2d\x85\x05\x61\x81\x96\x3d\x67\x92\x7c\xdd\x69\xf8\xdb\xb7\xab\xdb\xeb\xaf\x93\x9b\xab\xaf\xff\x68\xe4\xdf\x5f\x7f\x84\x5c\x57\x15\x59\xe2\xcf\x64\x24\x64\xbc\x2b\x3a\xce\x0d\x72\x3b\x4e\x2d\x9f\x3f\x5d\xff\xfd\xcf\xd1\x33\x38\xb6\xb9\xf7\x16\x5f\x8e\x3f\x4f\x9b\xa1\xdd\x0f\x1a\x12\x5d\x87\xa6\x46\x53\x09\x6b\x83\x37\xb9\x92\x39\x60\x06\xc9\x87\x66\x65\xc0\x62\x05\x56\x8b\xe1\x0e\xd8\x68\xe5\x27\x0c\x5b\xdf\x91\x07\x90\xdb\x12\xe0\x70\x48\x90\xc3\x0e\xdf\x0e\xfd\x42\x39\x94\x52\x7c\x9f\x04\x74\x63\xe4\x0e\x4a\xb6\x13\xfb\xa3\x21\x2a\xc8\x94\x97\x32\xbb\x7b\x3e\xe8\x90\xfd\xaf\xa4\xd4\x0b\x0b\x1f\xe3\x70\xbf\x41\x3b\x1c\x78\x8b\x46\xb1\x6a\x45\x38\xd6\x2e\xb4\xe1\x21\x71\x4c\x11\xf2\x92\xa9\x19\xf2\x11\xfc\x53\x5b\x47\xb2\x85\x97\x81\x75\x7e\x61\x8e\xfd\x6a\x44\x1d\xde\x22\x75\x53\x66\x5b\xd6\x59\x0d\x74\x2b\x9d\xa8\x98\xc3\x75\x9b\xc2\x26\x8a\xdd\xdf\x16\x47\x58\x24\xbd\xb2\x91\xe8\xba\x10\xa6\x45\x4d\xbc\x17\x7c\xc3\xd8\x49\x2c\x42\x39\x29\x84\xc4\x48\x56\x83\xc2\x83\x96\xda\xed\x24\xdb\xc6\xd9\x2c\xbf\x85\x1e\x9d\xee\x3b\xc2\x2a\x65\x90\x5e\x8a\x6e\x0c\x4f\x14\xe1\x6e\x59\x8b\x3c\x14\x06\xf4\x1b\xa3\xa5\xbf\x44\xf1\x91\xd4\x39\x93\xa3\xc7\x4a\x0e\x1b\x37\xcd\x62\x47\xe8\x76\x24\x37\x07\x71\xfb\xf3\xb4\xd5\x0e\xad\xb9\x0e\x05\xa6\x75\xd8\xdb\x8f\xbf\x04\x07\x6f\xf2\x06\xe9\x84\xa5\xf6\xb0\x60\x91\xe7\x7c\xcd\xc9\xa1\xe1\xdf\xda\x43\xce\x14\x14\x42\x71\x70\x44\x89\xd3\x65\x28\x8c\x84\xea\xe6\x9d\x35\xb4\x22\xcc\xaf\x08\xd9\x60\xfb\x50\xeb\x7a\xdb\x00\xdc\x2d\x67\x19\xaf\xfa\x75\xd5\x4b\x52\x57\x24\x22\xdb\x94\x39\xc1\x2a\x2c\xcf\xa9\xca\xa4\x0c\x42\x19\x8d\xc9\x75\xfe\x31\x5e\xf5\x4b\x27\x7b\x86\x4c\xd4\x29\xd8\x26\x73\x66\x04\xe5\xae\xcd\x84\xb4\x6e\x96\x49\xa1\x25\x47\x33\x54\xa1\x75\x71\x6f\x02\xa8\xd4\xd6\xbd\x04\x83\xed\x98\xd8\x21\x21\x7b\x05\x5c\x18\xcc\x9d\x36\x4b\x32\xaf\x63\x31\xe6\x98\x94\xdb\x4c\x9f\x72\x5a\x8c\x51\x4a\x6a\xb7\x69\xd7\x43\xb1\xe9\x90\x53\xd9\x32\x12\x1c\xd9\xd8\x78\xf5\xbe\xef\x35\xf0\x79\x5d\x1d\xed\x7c\x14\x22\x4f\x7a\x6d\xc9\x0c\x72\x98\x62\x41\x95\xe6\x14\x73\x5d\xd1\xa4\xe6\xc2\x8a\xa9\x4c\xa5\xa7\xa0\x9a\x9d\xd6\x7c\x12\x9c\x39\xe8\x58\x87\x52\x67\x47\x09\x34\x4a\x9a\x02\x70\xcd\x06\xe0\x15\x47\x03\x8b\x52\xe4\x65\x9f\x62\x73\xad\x14\x86\x7d\xe2\x29\x20\xd3\x0f\x86\x43\x21\x69\x6a\xaa\x5e\x49\xb5\xca\x2a\xb7\x9f\xaf\x61\x21\xa4\x04\xad\xe4\x92\x1c\x27\x66\x14\x0e\xa2\x08\xfd\x34\x24\x6d\x06\x49\x2e\xe1\x38\x88\x71\xc5\x5c\x5e\x12\x25\x92\x57\x45\x40\xce\x38\xad\x3c\x78\x34\x42\x7b\xfb\xf3\x2b\xd5\xc2\x7b\x26\x94\xb0\xe5\x09\xcc\xc0\xe0\xf7\x34\x45\xf8\x19\xbe\xfc\x7e\x2d\x5c\xeb\xbd\x67\x98\x54\x5a\xbc\xed\x83\x14\x0e\xf7\xcd\x0e\xa1\xbc\x7a\x81\xec\x30\x3c\x9f\x43\x22\xef\x26\x15\xb7\x14\x30\xcf\xec\x43\xf6\x8b\x9c\xd3\xb1\x61\x30\xad\x05\xe1\x6c\x90\xdb\x51\xf9\xbe\x5f\xf1\x93\x1d\xc5\x19\x9e\x04\x85\xff\x58\xd9\xeb\x95\x78\xf0\x08\x22\xb8\x7b\x21\xd2\xb9\x1c\x01\xb8\xc2\x69\x05\x61\xa7\xf4\x7d\xcf\x14\xf1\x56\xa1\xbd\xe2\x54\xf5\x4a\xad\xef\x29\xd5\x25\xb6\xda\x2b\x38\x5e\x06\xa7\xbf\x98\x94\x2c\x3e\x78\x94\x93\xda\xe8\xd3\x62\x25\xb2\xd2\x97\x30\x37\xb8\x31\x1a\x6a\x29\xac\x3b\xc7\xca\xb6\x83\x6f\x58\xc3\xff\x9a\x84\x86\xe7\x73\x2c\x09\x05\x15\x2d\xf5\x74\x0c\x76\x18\xf5\x7c\x60\x73\x6d\x84\x43\x3b\x0a\x1a\xdf\x32\xed\x74\x30\x3a\x82\x78\x02\x3c\x67\x4c\x37\xb5\xb6\x4e\xe4\x27\xc6\x35\xdd\x0a\xe8\x26\x4e\xf0\x0d\x94\x3f\x0d\xd4\xa7\x51\xfc\x0c\xcd\xe6\x2f\x2f\x7d\x1a\xe3\x1d\x5b\xf7\xb4\x34\xc4\xa7\x6f\x99\x83\x1a\x9c\xfe\xbf\x2b\x9f\x12\xa5\xdc\x87\x88\x86\xb9\x85\x45\x87\x8a\x07\x23\x33\x54\x68\x9a\x03\x16\x06\x41\x35\xc4\xb7\xe2\x9d\x53\x3a\xc2\xb1\x80\x8f\xb5\x36\xce\xd2\xee\x77\x68\xcb\x6b\xbb\x87\x3d\x84\xb7\xc2\x45\x97\xab\x36\xf0\xd0\x41\x5c\x79\xca\xa4\xd5\x9c\x2b\xec\x71\x0a\xd8\x9c\x3a\xec\x21\x4a\x96\x7a\xa9\x5b\x8b\x95\xee\xe3\x6e\x2a\x4a\xec\x7b\x8b\x2d\xb5\x97\xbc\xef\x53\x4e\x9f\xc4\x46\x6c\xdd\x36\x87\x2e\x39\x9c\x18\xe9\x62\xf3\x81\x4f\x88\x95\x04\x41\x0a\x84\x20\xdc\x0c\x7d\x0a\x30\xac\xfb\xdd\xab\xc1\xd0\x0c\x7d\xbe\xa4\xfb\xdd\x6a\xf5\x23\x9c\xfb\xdb\x97\x4f\xff\x1a\x26\xde\x0e\x6f\x6e\xb8\xf0\x7d\xeb\xdc\xd9\x26\xfa\x73\x65\xc2\xd6\xba\x27\x4c\x83\x1d\x98\x8f\x0f\x7c\x61\x3b\x5f\x42\x05\x37\x8d\xff\x06\x28\x6a\x26\x4c\xf2\x6f\x6f\x91\x03\x23\x47\x5e\xaf\xe3\x84\x8d\x80\x45\x67\x3b\xe3\x4a\xcc\x61\x55\x4b\xe6\xf0\x08\x62\xf8\x20\xa4\xec\x6f\xe6\x84\x8a\x1f\x04\x1a\x3d\x17\x1c\x39\xfc\xaa\xa1\xd1\x9f\xae\x10\x80\xd0\x6b\x9a\x82\xb7\x05\x9a\x30\x42\x39\x1b\xef\x74\xd0\x92\x2d\x1c\x6d\x24\xb8\xf6\x6e\x04\xb7\x4a\x8a\x7b\x0c\x9d\xf1\xe3\xbe\xce\x4c\x2f\x56\xca\x6c\xf8\xb4\xa8\x75\x58\x46\xc5\x1b\xb2\xbc\x04\x27\xd2\x55\x09\xd7\xa0\xb4\x03\xe6\xe8\x9d\x30\x44\xb8\x5c\xaf\x0d\xce\x85\xf6\x56\x2e\x01\x1f\x85\x0d\xdf\x2e\xdd\xe3\x32\xec\x5c\x2b\xcd\x45\xb1\x1c\x75\x17\x12\x07\xe2\x3a\xf7\x94\x37\x90\x43\x89\x06\x2f\xa1\x74\xae\xb6\x97\xe3\xf1\x4c\x4b\xa6\x66\x23\x6d\x66\xe3\xfa\x7e\x36\x76\xf8\xe8\xc6\xcd\xab\xe3\x33\x26\x41\xad\xf0\x53\xb1\x85\x01\xb7\x04\x63\xef\x53\xd5\x95\xbf\x05\xb6\xba\x3b\x94\x01\x0e\x1d\x66\xf3\x08\x07\x91\x70\xc5\x1e\x7b\x48\xfd\xf4\x43\x64\xdd\xc7\xe0\xd8\xaf\x6c\x28\x20\xba\x01\x16\x33\x33\x55\x2f\xe1\xfa\x6f\x1a\x5a\x64\xdc\x16\x2d\x84\x2b\x77\x6f\x65\x9a\xe9\xbd\x12\x99\xaf\x6c\x74\xd8\xdd\xfc\x00\xa9\xbc\xc0\xaa\x5f\x82\x7e\xdf\x6d\xfb\xbf\xfb\x5f\xfb\xdc\x3c\xc5\xbf\xf4\xfb\xe9\xdd\xd3\xbb\xff\x06\x00\x00\xff\xff\x58\xcc\x22\xd7\x5d\x2e\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 11869, mode: os.FileMode(0644), modTime: time.Unix(1579153488, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xfc, 0x5b, 0xc7, 0xcf, 0x36, 0x41, 0xe6, 0x56, 0x1b, 0x4d, 0x6c, 0xbd, 0xf3, 0x3d, 0x9, 0x7e, 0x8a, 0x5d, 0x72, 0xa7, 0x6d, 0x86, 0xb5, 0x38, 0xbb, 0x13, 0x86, 0xff, 0xae, 0x97, 0xb9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
