// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (14.098kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\xf0\x1d\x70\x1f\x68\x6d\xec\x3e\xe6\x2d\x48\xb7\x7b\x5d\x64\xaf\xd9\xb6\x29\xb0\x38\xf4\xbc\xb4\x38\xb2\xd8\x50\xa4\xc2\x0f\xc7\xc6\x22\xff\xfb\x61\x48\x49\x96\x2c\xc9\x76\x9c\x4b\x9b\xb8\xf5\x43\x62\x8b\x33\xfc\xf8\xcd\xcc\x6f\x86\x34\xfd\xe7\x09\xc0\xc8\xad\x0a\x1c\x9d\xc2\x48\xcf\x3e\x63\xe2\x46\x2f\xe8\x99\xc1\x1b\x2f\x0c\xf2\xd1\x29\xfc\xe7\x04\x00\x60\xc4\x72\xa6\x98\x99\x26\x5a\xa5\x62\xee\x0d\x73\x42\xab\xd1\x09\xc0\xa7\x20\xcf\x38\x17\xf4\x84\xc9\x4b\xa3\x0b\x34\x4e\xa0\x1d\x9d\xc2\x9f\x51\x97\xa3\x4d\x8c\x28\x82\xca\x29\x8c\xd6\x22\x50\x18\x4c\xc5\x12\x39\xdc\x0a\x97\xc1\xf2\x25\xdc\x0a\x29\x61\x86\xc0\xa4\xd4\xb7\xc8\x41\x28\x70\x19\x82\xd3\x05\x48\x5c\xa0\x04\x9d\x82\xcb\x84\x05\x9b\x64\x98\xb3\x17\x30\xf3\x2e\x2a\x29\xed\x48\xd1\x5b\xe4\xa0\x0d\x24\x19\x26\xd7\xc8\xc7\xf0\x81\xa4\x43\x77\x16\x52\x6d\x80\xa9\x24\xd3\xc6\x82\xd3\x24\x2e\x94\x45\xe3\x90\x87\x26\x1a\xc9\xa0\xb7\x48\xa3\x14\xcc\x38\x1b\x87\x43\xf8\xfd\xec\xd7\x0b\x48\x85\xc4\xb2\x3f\xea\x52\x31\xa9\xe7\xda\x87\x9e\x98\xe2\x30\x63\x61\x68\x05\xaf\x74\x72\x8d\x06\xce\x75\x5e\x68\x8b\x7f\xb3\xf0\xd3\xd2\xa1\xb2\x42\x2b\x78\x2d\x50\x72\x0b\x7f\xcf\x9c\x2b\xec\xe9\x64\xc2\x75\x62\xc7\x3c\xc8\x8f\x13\x9d\x4f\x92\xa8\x53\xfd\x7f\x49\x43\x4e\xfe\x82\x95\xfe\xcb\x34\xe8\xff\x63\x1c\xac\x04\x30\x2a\x98\x73\x68\x02\xaa\xff\x5d\xbe\xfc\x27\x19\xe4\x2e\x18\xa4\xe8\x31\x43\xaf\x09\xab\xd6\x86\x23\x30\x63\xd8\xaa\x1c\x01\x60\x24\x1c\xe6\xb6\x21\xd7\xef\x32\x65\x4b\xc7\x71\xca\xe7\x0b\xe6\xa5\x9b\x32\xce\x0d\x5a\xdb\x50\xa8\x9b\x3a\x8e\x15\x5f\x9f\x1a\x7d\xf7\xac\xa9\xb7\xf7\x76\x63\xd7\xff\x3e\x64\x08\xa5\x6c\xb0\x5d\x30\xb5\x48\xbc\x64\x06\x42\x4f\x63\xf8\x48\xff\x2a\x21\xb4\xe0\xad\x67\x52\xae\x80\x8b\x34\x45\x13\x9c\x25\xbe\x45\xe5\x00\xd5\x42\x18\xad\x72\x54\xce\x8e\xe1\xb5\x36\x80\x4b\x96\x17\x12\x5f\xc0\x2d\x42\xce\x56\x90\xb1\x05\x82\x56\x18\xbb\xaf\x07\xa7\x6e\x0a\xa3\xb9\x4f\x68\x6a\xc1\x89\x98\xd2\x2e\x2b\x47\xb0\x8e\xcd\x85\x9a\x8f\x5b\x70\x35\xd0\xb7\xce\x08\x35\xdf\x6c\x4d\xb5\xc9\x99\xa3\x76\x6f\xc4\x66\x63\x2e\xd4\x05\xaa\xb9\xcb\x46\xa7\xf0\x43\xa3\xe9\x6e\xa7\x45\x3a\xa0\xf6\x7b\xcb\xa0\xcf\xec\xf2\x9c\xb2\x7d\x80\x48\x52\x26\x2d\x76\x84\x37\xec\x7a\x06\x52\x58\x47\x21\x1b\x61\x36\x5a\xa2\x0d\xa8\x16\xcc\x65\xf1\x5d\x6b\x51\xa0\x83\x6e\x34\x84\xf6\xae\xf0\x8e\x1c\x82\x33\xc7\xc0\x6a\x6f\x12\xb4\x81\x98\x84\xea\x71\x92\xa6\xd9\x37\x4d\x34\x1c\x08\x65\x6b\x3d\x8d\x99\x44\xdb\x51\xae\x4d\x40\xf3\x1e\x6e\xa5\xf5\x8d\x36\x1a\x3f\x75\x26\x32\x18\x35\xdd\x91\xfa\xda\xfb\xc3\x87\xc4\xc1\x60\x61\xd0\xa2\x72\x42\xcd\x03\x4b\x12\x70\xd6\x69\x83\x15\x6d\x7f\x8c\xd1\x54\x51\x26\x41\xb2\x60\x92\x62\xc6\x69\xf8\xeb\xc7\xb3\xab\x8b\x0f\xd3\xcb\xb3\x0f\xff\xaa\xe4\xcf\x2f\xde\x40\xa2\xf3\x9c\x2c\xf5\x47\x69\x44\x64\xbc\x29\x3a\x49\x0c\x72\x3b\x29\x9f\xbc\x7b\x7b\xf1\xd3\x1f\x5d\xf4\x61\x67\x98\x94\x32\x43\xf1\x10\x5f\x77\xdb\xa1\xdf\x1f\x2e\x12\xef\xc2\x55\xa0\xc9\x85\xb5\xc1\x03\x5d\xc6\x1c\x30\x83\xe4\x77\xf3\x2c\xe0\x53\x03\xb8\xc6\x75\x07\x94\x84\xc6\x33\x82\xb2\x1d\x04\x03\x68\xee\x20\x0c\xb8\x2f\x69\xc0\x1e\x31\x11\x64\x84\x72\x28\xa5\xf8\x3c\x0d\xe8\x47\x36\x18\x94\x5e\x4f\xb4\x1b\xec\xeb\x69\xf6\x30\x65\x4b\x40\x79\x29\x37\x03\xba\x7a\x75\x02\xbb\xd6\xda\x64\xc1\x58\xea\xbc\x89\xd3\xff\x05\xd6\xd3\xa7\xda\xc8\x28\x96\xd7\xa4\x68\xed\xad\x36\xbc\x2a\x85\x92\x8c\xa9\x39\x55\x4c\xbf\x6a\xeb\x48\x36\xf5\x32\x30\xe3\x2b\xe6\xd8\xcf\x46\x14\x41\x8b\xba\xa3\x4a\xa7\x66\xc6\x7a\xa0\x2b\xe9\x44\xce\x1c\xf6\xfb\x10\x6c\x4b\x0b\x5d\x18\xb7\xd9\xbb\x82\xf3\x9e\x56\x2f\xd5\xb6\x12\x73\x13\xd6\x72\xa1\x53\xef\x05\xdf\x32\x8f\x52\x34\x42\x3c\xa5\x82\x2d\x92\xe9\xa0\xc2\xa0\x25\xf7\x73\xcc\x6d\x63\x6e\xd7\xd9\x42\xe5\x4e\xb7\x1d\xa6\x4e\x7f\x55\xcd\x8b\xe1\x1d\x31\x8f\x5b\x15\x22\x09\xc5\x10\xfd\xc5\xe8\x11\xef\xa3\xf8\x58\xea\x84\xc9\xf1\x32\x97\xc3\x4e\x50\xce\x64\x0f\x4a\x69\x48\x6f\x27\x97\xf5\xab\x87\x66\x36\x30\x5b\x9b\xf4\x10\xb0\xd6\xce\x7e\xf5\xe6\x55\xbd\x67\xa8\xfa\x85\x95\xf6\x70\xcb\x22\x27\xfb\x82\x53\x30\xc0\xef\xda\x43\xc2\x14\xa4\x42\xf1\xb8\x75\x99\xad\x42\x81\x28\x54\x33\x6f\x76\x10\x8c\xd0\x7f\x25\x18\x07\xdb\x86\x5a\xfa\x9f\x0f\x98\x63\xcd\xad\xc6\xab\x76\x9d\xf9\x9c\x28\x36\x12\xa6\xad\x4a\xc6\xe0\x01\x2c\x49\xa8\xb2\xa7\xcc\x4a\x99\x9e\xc9\x2e\x4f\x1a\xaf\xda\x65\xa8\x3d\x12\xc6\x6c\x14\xc4\xd3\x05\x33\x82\xf2\xfa\x76\xe2\xec\x9a\x7f\x9a\x6a\xc9\xd1\x0c\x55\xbe\x0d\xdd\x3a\x98\x33\x6d\xdd\x63\xb3\xed\x8e\x89\xde\x97\x4a\xce\x80\x0b\x83\x89\xd3\x66\x45\xae\xe0\x58\xe4\x02\x26\xe5\x36\x37\x29\xf3\x74\xe4\x0e\x4a\xd4\x57\xe5\xae\x94\x38\xc3\xc5\xc3\x92\xb1\xe0\xc8\x26\xc6\xab\xf3\xb6\x87\xc1\xbb\x6e\x77\xb4\x33\x55\x88\xbc\xec\xd7\x66\xcc\x20\x87\x19\xa6\x54\xc1\xcf\x30\xd1\x39\x4d\x6a\x21\xac\x98\xc9\xb2\xa4\x17\xb4\x57\xa2\x75\x3f\x49\x7e\xef\x75\xc0\x43\x68\xbe\xd1\x11\x54\x1d\x55\x85\x75\xc7\x2e\xe0\x15\x47\x03\xb7\x99\x48\xb2\x76\x3a\x48\xb4\x52\x18\xf6\xf6\x4f\x11\xad\x76\x00\x1d\x02\x53\x55\x4f\xb6\xca\xc9\x3a\x2b\x5e\xbd\xbb\x88\x27\x73\x5a\xc9\x55\x38\x9a\x0b\x19\x91\x83\x88\x67\x6a\x34\x2c\x6d\xd6\x49\xae\xc4\xb6\x17\xf7\x9c\xb9\x24\x23\x9a\x0d\xc7\x7e\x01\xa0\x23\x4d\x8b\x37\x1e\x8d\xd0\xde\xfe\xf8\x4c\xf7\x1c\x7b\x26\xc4\xb0\x95\x0d\x6c\xc5\xe0\xb7\x72\xc9\xf0\x23\xbc\xff\xed\x42\xb8\x75\xf4\x1c\x49\x52\x5c\xdb\xd4\xde\x48\xe1\xf0\x3e\x99\x2d\x94\xa9\x8f\x9c\xd9\xfa\xe7\x77\x5f\x36\xb8\x2c\x37\x11\x14\xc4\x1b\x76\x24\x3b\x47\x6e\x6c\xd8\x3a\xb8\x80\x05\xe1\x6c\x90\xdb\xb1\xc3\x38\xaf\x79\xd4\x8e\xe3\x2c\x9f\x64\xfa\x79\xf8\xf6\xc2\x2b\x71\xe3\x11\x44\x08\x95\x54\x94\xe7\xc0\x04\x6a\x8d\x5d\x0d\x6b\x63\x8b\x71\xce\x14\xf1\x6b\xaa\xbd\xe2\xb4\xbb\x90\x5a\x5f\x53\xea\x2e\x59\x75\xef\xc0\x7a\x5c\xec\x1e\x99\x3c\x2d\xde\x78\x94\xd3\xc2\xe8\xe3\x66\x4f\xf2\x88\xf7\x61\xad\x70\x69\x34\x14\x52\x58\x77\x2c\x3b\x88\x86\x0d\xc3\xba\x9e\x1a\x59\xf6\xcf\xef\x21\x64\x19\xba\x59\x53\x64\xc3\xb0\xf7\xa3\xc8\xd7\x6c\xa1\x8d\x70\x68\xc7\xa1\xc7\x6f\x8d\x1e\x1b\xb8\x1d\x40\x90\x01\xb2\x23\xa5\xc5\x42\x5b\x27\x92\x23\xe7\xc4\x66\x45\x79\x19\x17\x7c\xa4\xe5\x64\x65\xce\xa7\x59\x4c\xf6\xcd\xee\x51\x4a\xc9\xca\xc8\x87\xd6\x91\x6b\xba\xe4\xb3\x6f\x8d\x2b\x2b\xec\xbe\x57\x92\x43\x95\x64\x86\x52\xee\x4b\x98\xfd\xbc\xc5\xa2\x13\xc6\x83\xb5\x39\x2a\x34\xd5\x01\x1d\x83\xd0\x3d\x44\xad\xf8\xbd\x6f\x79\x04\x68\x01\x97\x85\x2e\x6f\x1d\xf5\x1d\x85\xd8\xe6\x61\x21\xd9\x43\xe1\x6d\x93\x07\xb7\x70\xdc\x57\xe3\xf5\xe7\x44\xae\xd5\x79\xd6\x9e\xa7\xd7\xd5\x89\xd7\x9e\xe2\xe4\x11\x5f\xe2\x9b\xc1\x7a\x9c\xc3\xbf\x0d\xcc\xb0\xed\xa5\x36\xd3\x5e\xf2\xb6\x2f\x3b\xfd\x24\x37\xe1\x5d\x1b\x1e\x02\x43\x38\xd5\x2c\xef\xfe\xf5\x1e\x4a\x86\xb8\x2d\x61\x29\x83\x32\x08\x57\xc3\x3f\x45\x68\xba\xfe\xfa\x45\xa1\xa9\x86\x3f\xce\xa4\xf1\xd9\x6a\xf5\xd0\x9c\xf1\xcb\xfb\xb7\xff\xee\x4f\x1c\x0d\xde\x1f\xb8\xc4\xf1\x9d\xfb\xfb\xd5\xf6\xe5\xfe\x75\xa1\x74\x4c\x2c\xbe\xf6\xa8\x67\x44\xe1\x0d\x53\x3c\x8c\xa0\x84\x6d\xdc\x04\x0d\xe1\x12\x3f\x06\x78\x0a\x26\x4c\x19\x67\xe1\xce\x38\xa3\x80\xea\xd6\xcb\xc2\x46\x10\xa3\x83\x1e\x69\xc5\xeb\x30\x2f\x24\x73\x78\x20\x81\xbd\x16\x52\xb6\x37\xe4\x42\xc5\x8b\xd5\x46\x2f\x04\x47\x0e\x3f\x6b\xa8\xc6\x28\xbf\xc2\x03\x42\xb7\x7a\x14\x3c\x34\xd0\x99\x11\xca\xd9\xf2\x22\xbe\x25\x5b\x39\xda\xe4\x71\xed\xdd\x18\xae\x94\x14\xd7\x18\x1a\xe3\x25\xe9\xc6\x6c\x5f\xd4\x9d\xd9\x70\x8d\x72\xed\xe4\x8c\x8a\x64\x64\x49\x06\x4e\x94\x5f\x55\x72\x1d\x7e\x2d\xc0\x1c\xe9\x84\x21\xc2\xe5\x9c\xc2\xe0\x42\x68\x6f\xe5\x0a\x70\x29\x6c\xb8\xa7\x79\x8d\xab\x70\xfa\x90\x6b\x2e\xd2\xd5\xb8\xb9\x90\x38\x10\xd7\x89\xa7\xfc\x87\x1c\x32\x34\x78\x0a\xd5\xd5\xfe\xb9\x96\x4c\xcd\xc7\xda\xcc\x27\xc5\xf5\x7c\xe2\x70\xe9\x26\x95\xea\xe4\x3b\x59\xf7\xaa\x69\x85\x6f\xd3\x1d\x4c\xbd\x83\x10\xf6\xe4\x7b\x68\xb9\xfd\x76\x42\xa7\xd7\xa7\x43\xd9\xec\x11\xa6\xfb\x80\x99\x1e\x94\xb4\x72\xb6\x6c\x59\xf1\x87\xff\x4b\x82\x6b\x83\xff\x90\x9b\x8b\x44\x08\x4d\x82\x89\x15\x14\x55\xa1\xd5\xaf\x89\x52\x11\xce\x7f\x84\x8a\xbf\x33\xda\x6b\xcb\x5c\x4d\xf3\x2b\x24\xc0\xda\xd0\xf7\xbf\x57\xd4\x43\xb4\x8f\x84\xc4\x97\x48\x57\x3d\x4f\xbb\xcf\x36\x9f\xb4\x3f\x37\x3f\xad\xdf\x57\xef\xe2\x7f\xfa\x7b\x77\x72\x77\x72\x72\x72\xf2\xbf\x00\x00\x00\xff\xff\x61\xbd\x4b\x46\x12\x37\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 14098, mode: os.FileMode(0644), modTime: time.Unix(1579316926, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x96, 0x8e, 0x4a, 0xc1, 0x9b, 0x9, 0xf, 0x94, 0xcd, 0xfd, 0x87, 0xd8, 0xdb, 0x35, 0x1a, 0x4f, 0xad, 0x4, 0xf, 0x68, 0xde, 0xaa, 0xba, 0xe5, 0x36, 0x1, 0x91, 0xf1, 0x85, 0xa9, 0x2f, 0xb7}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
