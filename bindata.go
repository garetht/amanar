// Code generated by go-bindata. DO NOT EDIT.
// sources:
// amanar_config_schema.json (14.776kB)

package amanar

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _amanar_config_schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\x1b\x37\x12\x7f\xd7\xa7\x18\xe8\x0e\xb8\xeb\xc1\x91\xd0\x3e\xfa\xcd\x70\x9a\x5e\x0a\xf7\xe2\x26\x71\x81\xe2\xe0\x73\xa9\xe5\x48\xcb\x98\x4b\xae\x49\xae\x6c\x21\xf0\x77\x3f\xcc\x70\x77\xb5\xff\x24\xcb\x76\x9d\xd8\x6a\xf4\x90\xc8\xcb\x19\xfe\xf9\xcd\xcc\x6f\x86\x14\xf7\xf3\x08\x60\x1c\x56\x39\x8e\x0f\x61\x6c\x67\x9f\x30\x09\xe3\x03\x7a\xe6\xf0\xaa\x50\x0e\xe5\xf8\x10\xfe\x3b\x02\x00\x18\x8b\x4c\x18\xe1\x2e\x12\x6b\xe6\x6a\x51\x38\x11\x94\x35\xe3\x11\xc0\x39\xcb\xe7\x22\x04\x74\xe6\xd4\xd9\x1c\x5d\x50\xe8\xc7\x87\xf0\x39\x2a\xfe\xef\xe6\xd5\xe4\x5f\xf5\x9f\x00\x63\x89\x3e\x71\x2a\xe7\x0e\x0e\x61\xbc\xd6\x81\xdc\xe1\x5c\xdd\xa0\x84\x6b\x15\x52\xb8\x79\x05\xd7\x4a\x6b\x98\x21\x08\xad\xed\x35\x4a\x50\x06\x42\x8a\x10\x6c\x0e\x1a\x97\xa8\xc1\xce\x21\xa4\xca\x83\x4f\x52\xcc\xc4\x01\xcc\x8a\x10\x95\x8c\x0d\xa4\x58\x78\x94\x60\x1d\x24\x29\x26\x97\x28\x27\xf0\x91\xa4\xb9\x3b\x0f\x73\xeb\x40\x98\x24\xb5\xce\x43\xb0\x24\xae\x8c\x47\x17\x50\x72\x13\x8d\xe4\xb0\xf0\x48\xa3\xe4\xc2\x05\x1f\x87\x43\xf8\xfd\xe8\x97\x13\x98\x2b\x8d\x65\x7f\xd4\xa5\x11\xda\x2e\x6c\xc1\x3d\x09\x23\x61\x26\x78\x68\x03\xaf\x6d\x72\x89\x0e\x8e\x6d\x96\x5b\x8f\xff\xf0\xf0\xe3\x4d\x40\xe3\x95\x35\xf0\x46\xa1\x96\x1e\xfe\x99\x86\x90\xfb\xc3\xe9\x54\xda\xc4\x4f\x24\xcb\x4f\x12\x9b\x4d\x93\xa8\x53\xfd\xff\x8a\x86\x9c\xfe\x0d\x2b\xfd\x57\x73\xd6\xff\x6e\x32\x66\x68\x6f\x47\x00\xb7\x6c\x0d\x21\xa5\x22\x78\x85\x6e\x19\x64\x2e\xb4\xc7\x68\xae\x01\x3b\x0d\x1a\xb8\x61\xb6\xca\x4d\x84\x73\x62\xc5\x5e\xc2\x8f\x55\xc0\xcc\x37\xe4\x86\x1d\xaa\x6c\xb1\x06\xdf\xcd\x6b\x9f\x8a\x9f\xcf\x8d\xef\x1d\xcf\x1b\x2f\x45\xa1\xc3\x85\x90\xd2\xa1\xf7\xe3\x03\x28\x1f\xb4\xe7\x78\xde\xe8\xe0\xf6\x60\xc7\x9e\x13\x6b\x7c\x10\x26\xb4\xb5\xeb\xef\xe7\x8d\x49\x0f\x80\x55\xb6\xd4\x9d\x1c\x76\xc7\xea\xf8\xf8\x11\x63\xcb\x7e\x32\xd3\xe4\xbf\xe0\xd0\x48\x74\x50\xf5\xe0\x0f\xe0\x3a\x55\x49\x0a\xc2\x21\xe4\x0a\x13\x64\x67\x53\x66\x6e\x5d\xc6\xcb\x84\x90\x8a\x00\xd2\xb2\x67\x4b\xcc\xd1\xb0\x77\xfd\x46\x80\xb4\xdd\xba\x1c\x2c\x7a\x34\x07\x40\xb0\x50\x41\x86\xa0\x6d\x22\x34\xf8\x20\x82\x4a\x20\x71\x28\xd1\x04\x25\xb4\xa7\xe0\xaa\x1c\x87\x34\xb8\xe7\x57\x12\x9d\x5a\xb2\x23\xa3\x9f\x8c\x0f\xda\xab\xdc\x68\xe8\x3e\xde\x01\xb3\x5c\x8b\x80\xe3\xf3\x8e\xd4\x46\x74\xe3\x08\x95\x5a\xbf\xad\x31\xbe\x0f\x4e\x99\xc5\xb8\x23\x70\x3b\xda\xf4\x57\xcb\x4b\x3a\x4e\x76\x97\x29\x3f\xa6\x08\xa5\x2c\x87\x3a\x33\x83\x4a\x0a\x2d\x1c\x2c\xa3\x31\x18\xb9\x4a\x08\x3d\x14\xbe\x10\x5a\xaf\x40\xaa\xf9\x1c\x1d\x73\x4b\xfc\x8a\x26\x00\x9a\xa5\x72\xd6\x64\x68\x82\x9f\xc0\x1b\xeb\x00\x6f\x44\x96\x6b\x3c\x80\x6b\x84\x4c\xac\x20\x15\x4b\x24\xfc\x63\xf7\xf5\xe0\xd4\x4d\xee\xac\x2c\x12\xb6\x18\x71\x8e\x30\x36\xa4\xe5\x08\x3e\x88\x85\x32\x8b\x8d\x36\x2b\x31\xeb\xb4\x46\x77\xa3\xf6\xc2\xa9\x6e\x63\xa6\xcc\x09\x9a\x45\x48\xc7\x87\xf0\xfd\x1d\x70\x6e\xa2\x91\xce\x2c\xda\x64\x52\x36\xf6\x29\xa5\xa3\x35\xe8\x6f\x3b\xf0\xde\x36\xbb\x1e\x81\x56\x3e\x50\xd0\x45\x98\x9d\xd5\xe8\x19\xd5\x5c\x84\x34\x7e\x6b\x2d\x0a\x2c\xeb\x46\x43\xd8\x22\xe4\x45\x20\x87\x90\x22\x08\xf0\xb6\x70\x14\xc2\x94\xc7\x28\xac\x7a\x4e\xd2\x34\x7b\xd7\x44\x43\xe9\xb7\xd5\x5a\x4f\x63\xa6\xd1\xf7\x94\x6b\x13\xd0\xbc\x37\xb7\xd2\xfa\xba\x11\x73\xde\x9b\xc8\xd6\xe8\x6c\x8f\x34\xd4\x3e\x1c\x3e\x24\x0e\x0e\x73\x87\x9e\xb8\xc7\x2c\x38\xa9\x12\x70\x3e\x58\x87\x55\x96\x6f\x52\x9b\xf2\x40\x90\x2c\x85\xa6\x98\x09\x16\xfe\xfe\xdb\xd1\xd9\xc9\xc7\x8b\xd3\xa3\x8f\xff\xae\xe4\x8f\x4f\xde\x42\x62\xb3\x8c\x2c\xf5\x47\x69\x44\x14\xb2\x29\x3a\x25\xbe\xf3\xd3\xf2\xc9\xfb\x77\x27\x3f\xfe\xd1\x47\x1f\xee\x0c\x93\x52\x66\x53\x3c\xc4\xcf\xed\x76\xe8\x77\x87\x8b\xc4\xfb\x70\xe5\xe8\x32\xe5\x3d\x7b\x20\xa7\x06\xca\x1c\xde\x16\x8b\x94\xf1\xa9\x01\x5c\xe3\x7a\x07\x94\x84\xc6\x0b\x82\xb2\x1d\x04\x1b\xd0\xbc\x83\x30\xe0\xbe\xa4\x01\x3b\xc4\x04\xcb\x28\x13\x50\x6b\xf5\xe9\x82\xd1\x8f\x6c\xb0\x51\x7a\x3d\xd1\x7e\xb0\xaf\xa7\x39\xc0\x94\x2d\x01\x53\x68\xdd\x0d\xe8\xea\xd3\x0b\xec\x5a\xab\xcb\x82\xb1\x84\x78\x1b\xa7\xff\x33\xac\xa7\x4f\x95\x84\x33\x22\xab\x49\xd1\xfb\x6b\xeb\x64\x55\x39\x27\xa9\x30\x0b\x2a\xb0\x7f\xb1\x3e\x90\xec\xbc\xd0\xcc\x8c\xaf\x45\x10\x3f\x39\x95\xb3\x16\x75\x47\x85\x71\xcd\x8c\xf5\x40\x67\x3a\xa8\x4c\x04\x1c\xf6\x21\xd8\x96\x16\xfa\x30\x6e\xb3\x77\x05\xe7\x3d\xad\x5e\xaa\x6d\x25\xe6\x26\xac\xe5\x42\x2f\x8a\x42\xc9\x2d\xf3\x28\x45\x23\xc4\x17\x54\xdf\x47\x32\xdd\xa8\xb0\xd1\x92\xbb\x39\xe6\xb6\x31\xb7\xeb\x6c\xa1\xf2\x60\xdb\x0e\x53\xa7\xbf\x6a\x8b\x84\xfc\x8d\x98\x27\xac\x72\x95\x70\x31\x44\xff\x62\xf4\x88\x0f\x51\x7c\xc2\x95\xe9\xe4\x26\xd3\x9b\x9d\xa0\x9c\xc9\x0e\x94\xd2\x90\xde\x4e\x2e\xeb\xcf\x00\xcd\x74\x30\x5b\x9b\xf4\x21\x60\xad\x9d\xfd\xec\xed\xeb\x7a\x8b\x59\xf5\x0b\x2b\x5b\xc0\xb5\x88\x9c\x5c\xe4\x92\x82\x01\x7e\xb7\x05\x24\xc2\xc0\x5c\x19\x19\x77\xba\xb3\x15\x17\x88\xca\x34\xf3\x66\x0f\xc1\x08\xfd\x57\x82\x71\x63\xdb\xa6\x96\xe1\xe7\x1b\xcc\xb1\xe6\x56\x57\x98\x76\x9d\xf9\x92\x28\x36\x12\xa6\xaf\x4a\x46\xf6\x00\x91\x24\x54\xd9\x37\x37\x65\x5d\x9e\x74\x85\x69\x97\xa1\xbd\x5d\x59\x13\xa9\x17\xc4\x98\x8d\x82\xf8\x62\x29\x9c\xa2\xbc\xbe\x9d\x38\xfb\xe6\xbf\x98\x5b\x2d\xd1\x6d\xaa\x7c\x1b\xba\x75\x30\xa7\xd6\x87\xa7\x66\xdb\x3b\x26\x7a\x5f\x2a\x39\x02\xa9\x1c\x26\xc1\xba\x15\xb9\x42\x10\x91\x0b\x84\xd6\xdb\xdc\xa4\xcc\xd3\x91\x3b\x28\x51\x9f\x95\xbb\x52\xe2\x8c\x10\xcf\xd6\x26\x4a\xa2\x98\xba\xc2\x1c\xb7\x3d\x0c\xde\xf7\xbb\xa3\x9d\xa9\xc1\x78\xb8\x30\x43\xf0\xa9\x70\x28\x61\x86\x73\xaa\xe0\x67\x98\xd8\x8c\x26\xb5\x54\x5e\xcd\x74\x59\xd2\x2b\xda\x2b\xd1\xba\x9f\x25\xbf\x0f\x3a\xe0\x43\x68\xbe\xd1\x11\x54\x1d\x55\x85\x75\xcf\x2e\x50\xf0\x39\x50\x3c\xfc\x69\xa5\x83\xc4\x1a\x83\xbc\xb7\x7f\x8e\x68\xb5\x03\xe8\x21\x30\x55\xf5\x64\xab\x9c\xac\xb3\xe2\xd9\xfb\x93\x78\x90\x6b\x8d\x5e\xf1\x41\x16\x67\x44\x09\x2a\x1e\xc1\xd2\xb0\xb4\x59\x27\xb9\x12\xdb\x41\xdc\x33\x11\x92\x94\x68\x96\x4f\x89\x19\xa0\x3d\x4d\x8b\x57\x05\x3a\x65\x0b\xff\xc3\x0b\xdd\x73\xec\x98\x10\x79\x2b\xcb\x6c\x25\xe0\xd7\x72\xc9\xf0\x03\x7c\xf8\xf5\x44\x85\x75\xf4\xec\x49\x52\x5c\xdb\xd4\x5f\x69\x15\xf0\x3e\x99\x8d\xcb\xd4\x27\xce\x6c\xc3\xf3\xbb\x2f\x1b\x9c\x96\x9b\x08\x0a\xe2\x8e\x1d\xc9\xce\x91\x1b\x1b\xb6\x66\x17\xf0\xa0\x82\x67\xb9\x3b\x76\x18\xc7\x35\x8f\xfa\x49\x9c\xe5\xb3\x4c\x3f\x8f\xdf\x5e\x14\x46\x5d\x15\x08\x8a\x43\x65\xae\xca\x73\x60\x02\xb5\xc6\xae\x86\xb5\xb1\xc5\x38\x16\x86\xf8\x75\x6e\x0b\x23\x69\x77\xa1\xad\xbd\xa4\xd4\x5d\xb2\xea\xce\x81\xf5\xb4\xd8\x3d\x31\x79\x7a\xbc\x2a\x50\x5f\xe4\xce\xee\x37\x7b\x92\x47\x7c\xe0\xb5\xc2\xa9\xb3\x90\x6b\xe5\xc3\xbe\xec\x20\x1a\x36\xe4\x75\x3d\x37\xb2\x1c\x9e\xdf\x63\xc8\x92\xbb\x59\x53\x64\xc3\xb0\xf7\xa3\xc8\x37\x62\x69\x9d\x0a\xe8\x27\xdc\xe3\x5f\x8d\x1e\x1b\xb8\x3d\x80\x20\x19\xb2\x3d\xa5\xc5\xdc\xfa\xa0\x92\x3d\xe7\xc4\x66\x45\x79\x1a\x17\xbc\xa7\xe5\x64\x65\xce\xe7\x59\x4c\x0e\xcd\xee\x49\x4a\xc9\xca\xc8\x0f\xad\x23\xd7\x74\x29\x67\x7f\x35\xae\xac\xb0\xfb\x56\x49\x6e\xaa\x24\x53\xd4\x7a\x57\xc2\x1c\xe6\x2d\x11\x9d\x30\x1e\xac\x2d\xd0\xa0\xab\x0e\xe8\x04\x70\xf7\x10\xb5\xe2\xef\xbe\xe5\x11\xa0\x07\xbc\xc9\x6d\x79\x49\x6d\xe8\x28\xc4\x37\x0f\x0b\xc9\x1e\x06\xaf\x9b\x3c\xb8\x85\xe3\xbe\x1a\xaf\xbf\x24\x72\xad\xce\xb3\x76\x3c\xbd\xae\x4e\xbc\x76\x14\x27\x8f\xf8\x12\xbf\x0c\xd6\xe3\x3c\xfc\xd7\xc0\x14\xdb\x5e\xea\x53\x5b\x68\xd9\xf6\xe5\x60\x9f\xe5\x26\xbc\x6f\xc3\x87\xc0\xc0\xa7\x9a\xe5\x55\xd1\xc1\x43\x49\x8e\xdb\x12\x96\x32\x28\x59\xb8\x1a\xfe\x39\x42\xd3\xf7\xd7\x2f\x0a\x4d\x35\xfc\x7e\x26\x8d\x4f\xde\x9a\xc7\xe6\x8c\x9f\x3f\xbc\xfb\xcf\x70\xe2\x68\xf0\xfe\x86\x4b\x1c\xdf\xb8\x7f\x58\x6d\x57\xee\x5f\x17\x4a\xfb\xc4\xe2\x6b\x8f\x7a\x41\x14\xde\x30\xc5\xe3\x08\x4a\xf9\xc6\x4d\x50\x0e\x97\xf8\x27\xc3\x93\x0b\xd5\xba\x61\x2d\x28\xa0\xfa\xf5\xb2\xf2\x11\xc4\xe8\xa0\x7b\x5a\xf1\x56\x77\xb4\x1f\x48\x60\x6f\x94\xd6\xbe\x73\x11\x3d\x5e\xac\x76\x76\xa9\x24\x4a\xf8\xc9\x42\x35\x46\xf9\x13\x1e\x10\xba\xd5\x23\xf6\x50\xa6\x33\xa7\x4c\xf0\xe5\x7b\x1b\x9e\x6c\x15\x68\x93\x27\x6d\x11\xe2\xde\xee\xb8\x31\x48\x34\x09\xed\xf4\x3c\x06\xb2\x1f\xff\xf8\x6a\x63\x3d\x8d\x37\x81\x7b\xa4\xad\xe1\xbc\x7c\x49\x63\x72\xd6\xfc\xc1\x72\x72\x5a\x72\xe7\x77\x7c\xf1\x52\x2c\x85\xd2\x94\xc0\x26\x70\x66\xb4\xba\x44\xee\x2e\xde\xc6\x6e\xc0\x72\x50\xcf\xda\xb3\xda\x3a\x9a\x04\x55\xe3\x28\x92\x14\x82\x2a\x87\x28\xef\xfa\x8b\x40\x3a\xbc\x16\xbe\x05\x94\x3b\x5c\x2a\x5b\x78\xbd\x02\xbc\x51\x9e\x2f\x84\x5e\xe2\x8a\x8f\x39\x32\x2b\xd5\x7c\x35\x69\x22\x16\x07\x92\x36\x29\x28\xd1\xa2\x84\x14\x1d\x1e\x42\xf5\xca\xc9\xc2\x6a\x61\x16\x13\xeb\x16\xd3\xfc\x72\x31\xa5\x95\x4f\x2b\xd5\xe9\xb7\xac\x30\xa8\x36\xf4\x16\x4b\xf7\x73\x07\xf3\xec\x98\x58\xa0\x15\x5f\xdb\x33\x07\x7d\xce\x1f\x4a\x9b\x4f\x30\xdd\x47\xcc\xf4\x41\xd9\x31\x13\x37\x2d\x2b\x7e\xff\xa7\x64\xd2\x36\xf8\x8f\xb9\x22\x49\x84\xd0\x64\xb2\x58\xaa\x51\xb9\x5b\xbd\xe5\x36\x57\x7c\xd0\xa4\x4c\x7c\xff\x6d\xa7\xbd\x79\x35\xcd\xaf\x90\x69\xb7\xbe\x9b\xb3\x0d\x95\xa3\x21\x46\x7f\x22\x24\xbe\x44\x5e\x1c\x78\xda\x7f\xd6\x7d\xb2\xe5\xed\xa4\x51\xf7\x5b\xfc\x9f\xdf\xef\x1b\xdd\x8e\x46\xa3\xd1\xff\x03\x00\x00\xff\xff\xab\x73\x45\x86\xb8\x39\x00\x00")

func amanar_config_schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_amanar_config_schemaJson,
		"amanar_config_schema.json",
	)
}

func amanar_config_schemaJson() (*asset, error) {
	bytes, err := amanar_config_schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "amanar_config_schema.json", size: 14776, mode: os.FileMode(0644), modTime: time.Unix(1579323351, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x5a, 0x67, 0x42, 0xd7, 0xe3, 0x40, 0xa3, 0x4a, 0xa3, 0x19, 0xe, 0x30, 0xe, 0x5c, 0x90, 0x34, 0x13, 0x7, 0xad, 0x46, 0x59, 0x16, 0x18, 0x33, 0xa4, 0xdf, 0xe0, 0xe3, 0xae, 0xcb, 0x88}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"amanar_config_schema.json": amanar_config_schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"amanar_config_schema.json": &bintree{amanar_config_schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
